{"file_contents":{"dev.js":{"content":"// Simple script to start the development server with proper environment\r\nimport { spawn } from 'child_process';\r\nimport { fileURLToPath } from 'url';\r\nimport { dirname, join } from 'path';\r\n\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = dirname(__filename);\r\n\r\n// Set environment variables\r\nprocess.env.NODE_ENV = 'development';\r\nprocess.env.PORT = process.env.PORT || '5000';\r\n\r\n// Start the server\r\nconst serverPath = join(__dirname, 'server', 'index.ts');\r\nconst child = spawn('npx', ['tsx', serverPath], {\r\n  stdio: 'inherit',\r\n  env: process.env,\r\n  shell: true\r\n});\r\n\r\nchild.on('error', (error) => {\r\n  console.error('Failed to start server:', error);\r\n});\r\n\r\nchild.on('exit', (code) => {\r\n  process.exit(code);\r\n});","size_bytes":748},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# IQR Control - Business Management System\n\n## Overview\n\nIQR Control is a comprehensive Arabic-language business management system designed for service-oriented businesses. The application provides an integrated solution for managing customers, financial records, employees, and generating reports. Built with a modern full-stack architecture, it features a glass-morphism UI design with gradient themes and supports multi-user access with role-based permissions.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript for type safety and component-based development\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack React Query for server state management and caching\n- **UI Framework**: Radix UI primitives with shadcn/ui components for accessible, customizable interface elements\n- **Styling**: Tailwind CSS with custom glass-morphism design system and gradient color schemes\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n- **Internationalization**: Right-to-left (RTL) layout support with Arabic font integration (Noto Sans Arabic)\n\n### Backend Architecture\n- **Server Framework**: Express.js with TypeScript for API development\n- **Authentication**: Database-based authentication with secure password hashing using scrypt\n- **Session Management**: Express session with PostgreSQL session store for persistent user sessions\n- **File Handling**: Multer middleware for file uploads with size and type restrictions\n- **API Design**: RESTful API structure with comprehensive error handling and request logging\n\n### Database Design\n- **ORM**: Drizzle ORM for type-safe database operations and schema management\n- **Schema**: Modular schema design with the following core entities:\n  - Users table with role-based access control (viewer, editor, admin)\n  - Customers table with subscription management and expiry tracking\n  - Income entries with categorization (subscriptions, prints, other)\n  - Expense entries with reason tracking\n  - Employees table with position and salary information\n  - Activities table for audit logging\n  - Sessions table for authentication persistence\n\n### Development Workflow\n- **Build System**: Vite for fast development and optimized production builds\n- **Code Quality**: TypeScript strict mode with comprehensive type checking\n- **Development Server**: Hot module replacement with error overlay for enhanced developer experience\n- **Build Process**: Separate client and server builds with ESBuild for server-side bundling\n\n### UI/UX Design System\n- **Theme**: Dark mode with glass-morphism aesthetic using CSS variables\n- **Components**: Reusable component library with consistent styling patterns\n- **Gradients**: Custom gradient color system with predefined color combinations\n- **Animations**: Smooth transitions and hover effects for enhanced user experience\n- **Responsive Design**: Mobile-first approach with adaptive layouts\n\n### Security Implementation\n- **Authentication Flow**: Database-based authentication with secure password hashing using scrypt algorithm\n- **Session Security**: HTTP-only cookies with secure flags and configurable TTL\n- **Input Validation**: Zod schema validation on both client and server sides\n- **File Upload Security**: MIME type validation and file size restrictions\n- **Authorization**: Role-based access control with middleware protection\n\n## External Dependencies\n\n### Core Infrastructure\n- **Database**: PostgreSQL with Neon serverless driver for scalable data storage\n- **Authentication Provider**: Custom database-based authentication system\n- **File Storage**: Local file system with configurable upload directory\n\n### Development Tools\n- **Package Manager**: npm with lock file for reproducible builds\n- **Type Checking**: TypeScript compiler with strict configuration\n- **Code Formatting**: Built-in formatter with consistent style guidelines\n\n### UI Component Libraries\n- **Base Components**: Radix UI for accessible primitives\n- **Icon Library**: Lucide React for consistent iconography\n- **Date Handling**: date-fns for internationalized date operations\n- **Form Validation**: Zod for runtime type validation\n\n### Build and Development\n- **Frontend Bundler**: Vite with React plugin for optimized development\n- **Backend Runtime**: Node.js with ES modules support\n- **Development Enhancers**: Replit-specific plugins for error handling and debugging\n\n### Third-Party Integrations\n- **Font Services**: Google Fonts for Arabic typography (Noto Sans Arabic)\n- **CSS Framework**: Tailwind CSS with PostCSS for utility-first styling\n- **State Management**: TanStack Query for efficient data fetching and caching","size_bytes":4783},"run-local.js":{"content":"// Simple script to run the server locally with all environment variables set\r\nprocess.env.DATABASE_URL = 'postgresql://neondb_owner:npg_j0uJzebEPgs4@ep-old-tooth-adz3pz5j-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require';\r\nprocess.env.SESSION_SECRET = 'development-session-secret-change-in-production';\r\nprocess.env.NODE_ENV = 'development';\r\nprocess.env.PORT = '5000';\r\n\r\nconsole.log('üöÄ Starting IQR Control Development Server...');\r\nconsole.log('üìä Dashboard URL: http://localhost:5000');\r\nconsole.log('üë§ Login: admin / admin123');\r\nconsole.log('üíæ Database: Connected to Neon PostgreSQL');\r\nconsole.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');\r\n\r\n// Import and run the server\r\nimport('./server/index.ts').catch(console.error);","size_bytes":860},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        arabic: [\"'Noto Sans Arabic'\", \"sans-serif\"],\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"gradient\": \"gradient 15s ease infinite\",\n        \"float\": \"float 3s ease-in-out infinite\",\n        \"glow\": \"glow 2s ease-in-out infinite alternate\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n        gradient: {\n          \"0%, 100%\": { \"background-position\": \"0% 50%\" },\n          \"50%\": { \"background-position\": \"100% 50%\" },\n        },\n        float: {\n          \"0%, 100%\": { transform: \"translateY(0px)\" },\n          \"50%\": { transform: \"translateY(-10px)\" },\n        },\n        glow: {\n          \"0%\": { \"box-shadow\": \"0 0 20px rgba(139, 95, 191, 0.3)\" },\n          \"100%\": { \"box-shadow\": \"0 0 30px rgba(139, 95, 191, 0.6)\" },\n        },\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2710},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth.ts":{"content":"import session from \"express-session\";\r\nimport type { Express, RequestHandler } from \"express\";\r\nimport connectPg from \"connect-pg-simple\";\r\nimport MemoryStore from \"memorystore\";\r\nimport { storage } from \"./storage\";\r\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\r\nimport { promisify } from \"util\";\r\n\r\nconst scryptAsync = promisify(scrypt);\r\n\r\nexport async function hashPassword(password: string): Promise<string> {\r\n  const salt = randomBytes(16).toString(\"hex\");\r\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\r\n  return `${buf.toString(\"hex\")}.${salt}`;\r\n}\r\n\r\nexport async function verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\r\n  try {\r\n    const [hashedPwd, salt] = hashedPassword.split(\".\");\r\n    const hashedPasswordBuf = Buffer.from(hashedPwd, \"hex\");\r\n    const suppliedPasswordBuf = (await scryptAsync(password, salt, 64)) as Buffer;\r\n    return timingSafeEqual(hashedPasswordBuf, suppliedPasswordBuf);\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport function getSession() {\r\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\r\n  let sessionStore: any;\r\n\r\n  if (process.env.DATABASE_URL) {\r\n    const PgStore = connectPg(session);\r\n    sessionStore = new PgStore({\r\n      conString: process.env.DATABASE_URL?.replace(/^.*?postgresql:/, 'postgresql:').replace(/['\"].*?$/, '').trim() || process.env.DATABASE_URL,\r\n      tableName: \"session\",          // üëà ŸÜÿ≥ÿ™ÿÆÿØŸÖ ÿ¨ÿØŸàŸÑ session\r\n      schemaName: \"public\",          // üëà ÿ∂ŸÖŸÜ ÿ≥ŸÉŸäŸÖÿ© public\r\n      createTableIfMissing: true,    // üëà ÿ£ŸÜÿ¥ÿ¶ ÿßŸÑÿ¨ÿØŸàŸÑ ÿ•ÿ∞ÿß ŸÑŸÖ ŸäŸÉŸÜ ŸÖŸàÿ¨ŸàÿØÿßŸã\r\n      ttl: sessionTtl / 1000         // connect-pg-simple Ÿäÿ™ŸàŸÇÿπ ÿ´ŸàÿßŸÜŸä\r\n    });\r\n    console.log(\"‚úÖ Using PostgreSQL session store (public.session)\");\r\n  } else {\r\n    const MemStore = MemoryStore(session);\r\n    sessionStore = new MemStore({ checkPeriod: sessionTtl });\r\n    console.log(\"‚ö†Ô∏è Using memory session store\");\r\n  }\r\n\r\n  return session({\r\n    secret: process.env.SESSION_SECRET || \"development-session-secret-change-in-production\",\r\n    store: sessionStore,\r\n    resave: false,\r\n    saveUninitialized: false,\r\n    name: \"iqr.sid\",\r\n    cookie: {\r\n      httpOnly: true,\r\n      secure: process.env.NODE_ENV === \"production\",\r\n      maxAge: sessionTtl,\r\n      sameSite: \"lax\"\r\n    },\r\n    rolling: true\r\n  });\r\n}\r\n\r\nexport function setupAuth(app: Express) {\r\n  app.set(\"trust proxy\", 1);\r\n  app.use(getSession());\r\n\r\n  app.post(\"/api/auth/login\", async (req, res) => {\r\n    try {\r\n      const { username, password } = req.body;\r\n      if (!username || !password) {\r\n        return res.status(400).json({ message: \"ÿßÿ≥ŸÖ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸàŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ŸÖÿ∑ŸÑŸàÿ®ÿßŸÜ\" });\r\n      }\r\n\r\n      const user = await storage.getUserByUsername(username);\r\n      if (!user || !user.password) {\r\n        return res.status(401).json({ message: \"ÿßÿ≥ŸÖ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ£Ÿà ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠\" });\r\n      }\r\n\r\n      const ok = await verifyPassword(password, user.password);\r\n      if (!ok) return res.status(401).json({ message: \"ÿßÿ≥ŸÖ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ£Ÿà ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠\" });\r\n\r\n      (req.session as any).userId = user.id;\r\n      const { password: _pw, ...safeUser } = user;\r\n      res.json(safeUser);\r\n    } catch (e) {\r\n      console.error(\"Login error:\", e);\r\n      res.status(500).json({ message: \"ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ\" });\r\n    }\r\n  });\r\n\r\n  const handleLogout = (req: any, res: any) => {\r\n    req.session.destroy((err: any) => {\r\n      if (err) return res.status(500).json({ message: \"ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿÆÿ±Ÿàÿ¨\" });\r\n      res.clearCookie(\"connect.sid\");\r\n      if (req.method === \"GET\") res.redirect(\"/login\");\r\n      else res.json({ message: \"ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿÆÿ±Ÿàÿ¨ ÿ®ŸÜÿ¨ÿßÿ≠\" });\r\n    });\r\n  };\r\n\r\n  app.post(\"/api/auth/logout\", handleLogout);\r\n  app.get(\"/api/logout\", handleLogout);\r\n\r\n  app.get(\"/api/auth/user\", async (req, res) => {\r\n    try {\r\n      const userId = (req.session as any).userId;\r\n      if (!userId) return res.status(401).json({ message: \"Unauthorized\" });\r\n\r\n      const user = await storage.getUser(userId);\r\n      if (!user) return res.status(401).json({ message: \"Unauthorized\" });\r\n\r\n      const { password: _pw, ...safeUser } = user;\r\n      res.json(safeUser);\r\n    } catch (e) {\r\n      console.error(\"Error fetching user:\", e);\r\n      res.status(500).json({ message: \"Failed to fetch user\" });\r\n    }\r\n  });\r\n}\r\n\r\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\r\n  try {\r\n    const userId = (req.session as any).userId;\r\n    if (!userId) return res.status(401).json({ message: \"Unauthorized\" });\r\n\r\n    const user = await storage.getUser(userId);\r\n    if (!user) return res.status(401).json({ message: \"Unauthorized\" });\r\n\r\n    (req as any).user = user;\r\n    next();\r\n  } catch (e) {\r\n    console.error(\"Authentication error:\", e);\r\n    res.status(401).json({ message: \"Unauthorized\" });\r\n  }\r\n};\r\n","size_bytes":5031},"server/db.ts":{"content":"import dotenv from \"dotenv\";\n// Load environment variables first\ndotenv.config();\n\nimport { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport { eq } from 'drizzle-orm';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nlet pool: Pool | null = null;\nlet db: any = null;\n\nasync function createSessionTable() {\n  if (!pool) return;\n  \n  try {\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS public.session (\n        sid VARCHAR(255) PRIMARY KEY,\n        sess JSON NOT NULL,\n        expire TIMESTAMP(6) NOT NULL\n      );\n      CREATE INDEX IF NOT EXISTS session_expire_idx ON public.session(expire);\n    `);\n    console.log(\"‚úÖ Session table ready\");\n  } catch (error) {\n    console.error(\"‚ö†Ô∏è  Error creating session table:\", error);\n  }\n}\n\nasync function createAllTables() {\n  if (!pool) return;\n  \n  try {\n    // Create extensions\n    await pool.query(`CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";`);\n    \n    // Create users table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS users (\n        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n        email VARCHAR UNIQUE,\n        first_name VARCHAR,\n        last_name VARCHAR,\n        profile_image_url VARCHAR,\n        username VARCHAR UNIQUE,\n        password VARCHAR,\n        role VARCHAR DEFAULT 'viewer',\n        is_manual_user BOOLEAN DEFAULT false,\n        created_at TIMESTAMP DEFAULT now(),\n        updated_at TIMESTAMP DEFAULT now()\n      );\n    `);\n    \n    // Create customers table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS customers (\n        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n        name TEXT NOT NULL,\n        menu_url TEXT,\n        join_date DATE NOT NULL,\n        subscription_type VARCHAR NOT NULL,\n        expiry_date DATE NOT NULL,\n        is_active BOOLEAN DEFAULT true,\n        created_at TIMESTAMP DEFAULT now(),\n        updated_at TIMESTAMP DEFAULT now()\n      );\n    `);\n    \n    // Create income_entries table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS income_entries (\n        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n        customer_id VARCHAR REFERENCES customers(id),\n        type VARCHAR NOT NULL,\n        print_type TEXT,\n        amount DECIMAL(10,2) NOT NULL,\n        receipt_url TEXT,\n        description TEXT,\n        created_at TIMESTAMP DEFAULT now()\n      );\n    `);\n    \n    // Create expense_entries table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS expense_entries (\n        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n        amount DECIMAL(10,2) NOT NULL,\n        reason TEXT NOT NULL,\n        description TEXT,\n        created_at TIMESTAMP DEFAULT now(),\n        updated_at TIMESTAMP DEFAULT now()\n      );\n    `);\n    \n    // Create employees table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS employees (\n        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n        name TEXT NOT NULL,\n        position TEXT,\n        salary DECIMAL(10,2) NOT NULL,\n        is_active BOOLEAN DEFAULT true,\n        created_at TIMESTAMP DEFAULT now(),\n        updated_at TIMESTAMP DEFAULT now()\n      );\n    `);\n    \n    // Create activities table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS activities (\n        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n        type VARCHAR NOT NULL,\n        description TEXT NOT NULL,\n        related_id VARCHAR,\n        created_at TIMESTAMP DEFAULT now()\n      );\n    `);\n    \n    console.log(\"‚úÖ All database tables created successfully\");\n  } catch (error) {\n    console.error(\"‚ö†Ô∏è  Error creating tables:\", error);\n  }\n}\n\n// ÿ™ŸÜÿ∏ŸäŸÅ ÿ±ÿßÿ®ÿ∑ ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸÖŸÜ ÿ£Ÿä ÿ£ÿ≠ÿ±ŸÅ ÿ≤ÿßÿ¶ÿØÿ©\nlet cleanDatabaseUrl = process.env.DATABASE_URL;\nif (cleanDatabaseUrl) {\n  // ÿ•ÿ≤ÿßŸÑÿ© \"psql\" ŸàÿπŸÑÿßŸÖÿßÿ™ ÿßŸÑÿßŸÇÿ™ÿ®ÿßÿ≥ ŸàÿßŸÑŸÅÿ±ÿßÿ∫ÿßÿ™\n  cleanDatabaseUrl = cleanDatabaseUrl\n    .replace(/^.*?postgresql:/, 'postgresql:') // ÿ•ÿ≤ÿßŸÑÿ© ŸÉŸÑ ÿ¥Ÿäÿ° ŸÇÿ®ŸÑ postgresql:\n    .replace(/['\"].*?$/, '') // ÿ•ÿ≤ÿßŸÑÿ© ÿπŸÑÿßŸÖÿßÿ™ ÿßŸÑÿßŸÇÿ™ÿ®ÿßÿ≥ ŸàÿßŸÑÿ®ÿßŸÇŸä\n    .trim();\n  console.log(\"üîó Database URL cleaned:\", cleanDatabaseUrl.substring(0, 50) + \"...\");\n}\n\nasync function createAdminUser() {\n  if (!db) return;\n  \n  try {\n    const { hashPassword } = await import(\"./auth\");\n    \n    // ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ Ÿàÿ¨ŸàÿØ ŸÖÿ≥ÿ™ÿÆÿØŸÖ admin\n    const existingAdmin = await db.select().from(schema.users).where(eq(schema.users.username, 'admin')).limit(1);\n    \n    if (existingAdmin.length > 0) {\n      console.log('‚úÖ Admin user already exists');\n      return;\n    }\n\n    // ÿ•ŸÜÿ¥ÿßÿ° ŸÖÿ≥ÿ™ÿÆÿØŸÖ admin ÿ¨ÿØŸäÿØ\n    const hashedPassword = await hashPassword('admin123');\n    \n    await db.insert(schema.users).values({\n      username: 'admin',\n      password: hashedPassword,\n      role: 'admin',\n      isManualUser: true\n    });\n    \n    console.log('‚úÖ Default admin user created');\n    console.log('üë§ Username: admin');\n    console.log('üîë Password: admin123');\n  } catch (error) {\n    console.error('‚ùå Error creating admin user:', error);\n  }\n}\n\nasync function initializeDatabase() {\n  if (!cleanDatabaseUrl) {\n    console.log(\"‚ö†Ô∏è  DATABASE_URL not set. Please provision a database in Replit.\");\n    console.log(\"   The application will start but database features will be unavailable.\");\n    return;\n  }\n  \n  pool = new Pool({ connectionString: cleanDatabaseUrl });\n  db = drizzle({ client: pool, schema });\n  console.log(\"‚úÖ Database connected successfully\");\n  \n  // ÿ•ŸÜÿ¥ÿßÿ° ÿ¨ŸÖŸäÿπ ÿßŸÑÿ¨ÿØÿßŸàŸÑ\n  await createAllTables();\n  await createSessionTable();\n  \n  // ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑÿ•ÿØÿßÿ±Ÿä ÿßŸÑÿßŸÅÿ™ÿ±ÿßÿ∂Ÿä\n  await createAdminUser();\n}\n\n// ÿ™ÿ¥ÿ∫ŸäŸÑ ÿ•ÿπÿØÿßÿØ ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™\ninitializeDatabase().catch(console.error);\n\nexport { pool, db };","size_bytes":5871},"server/index.ts":{"content":"import dotenv from \"dotenv\";\n// Load environment variables from .env file in development\ndotenv.config();\n\n// Set default environment variables if not provided\nif (!process.env.DATABASE_URL) {\n  process.env.DATABASE_URL = 'postgresql://neondb_owner:npg_j0uJzebEPgs4@ep-old-tooth-adz3pz5j-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require';\n}\nif (!process.env.SESSION_SECRET) {\n  process.env.SESSION_SECRET = 'development-session-secret-change-in-production';\n}\nif (!process.env.NODE_ENV) {\n  process.env.NODE_ENV = 'development';\n}\n\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Session debugging middleware\napp.use((req, res, next) => {\n  const sessionId = (req.session as any)?.id;\n  const userId = (req.session as any)?.userId;\n  \n  if (req.path.startsWith('/api/') && req.path !== '/api/auth/login') {\n    console.log(`Session debug - Path: ${req.path}, SessionID: ${sessionId}, UserID: ${userId}`);\n  }\n  next();\n});\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  const host = '0.0.0.0'; // Bind to all interfaces for Replit\n  \n  server.listen({\n    port,\n    host,\n    reusePort: process.platform !== 'win32',\n  }, () => {\n    console.log(`‚úÖ IQR Control server running on http://${host}:${port}`);\n    console.log(`üë§ Login: admin / admin123`);\n    console.log(`üíæ Database: Connected to Neon PostgreSQL`);\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":3247},"server/replitAuth.ts":{"content":"import session from \"express-session\";\r\nimport connectPg from \"connect-pg-simple\";\r\nimport type { Express } from \"express\";\r\n\r\nexport const sessionTtl = 7 * 24 * 60 * 60; // seconds\r\n\r\nexport function getSession() {\r\n  const PgStore = connectPg(session);\r\n  const store = new PgStore({\r\n    conString: process.env.DATABASE_URL?.replace(/^.*?postgresql:/, 'postgresql:').replace(/['\"].*?$/, '').trim() || process.env.DATABASE_URL,\r\n    tableName: \"session\",\r\n    schemaName: \"public\",\r\n    createTableIfMissing: true,\r\n    ttl: sessionTtl\r\n  });\r\n\r\n  return session({\r\n    secret: process.env.SESSION_SECRET || \"development-session-secret-change-in-production\",\r\n    store,\r\n    resave: false,\r\n    saveUninitialized: false,\r\n    cookie: {\r\n      maxAge: sessionTtl * 1000,\r\n      httpOnly: true,\r\n      secure: process.env.NODE_ENV === \"production\",\r\n      sameSite: \"lax\"\r\n    }\r\n  });\r\n}\r\n\r\nexport function setupAuth(app: Express) {\r\n  app.use(getSession());\r\n  // ‚Ä¶ ÿ®ŸÇŸäÿ© ŸÖŸÜÿ∑ŸÇ ÿßŸÑŸÖÿµÿßÿØŸÇÿ© ÿ•ŸÜ ŸàŸèÿ¨ÿØ ‚Ä¶\r\n}\r\n","size_bytes":1028},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport express from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated, hashPassword } from \"./auth\";\nimport {\n  insertCustomerSchema,\n  insertIncomeEntrySchema,\n  insertExpenseEntrySchema,\n  insertEmployeeSchema,\n  insertManualUserSchema\n} from \"@shared/schema\";\n\n\n\n\n// Configure multer for file uploads\nconst upload = multer({\n  dest: 'uploads/',\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = /jpeg|jpg|png|pdf/;\n    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());\n    const mimetype = allowedTypes.test(file.mimetype);\n    \n    if (mimetype && extname) {\n      return cb(null, true);\n    } else {\n      cb(new Error('ŸäŸèÿ≥ŸÖÿ≠ ŸÅŸÇÿ∑ ÿ®ŸÖŸÑŸÅÿßÿ™ ÿßŸÑÿµŸàÿ± Ÿà PDF'));\n    }\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  setupAuth(app);\n\n  // Update user profile\n  app.put('/api/auth/user/profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { firstName, lastName, email, username, password } = req.body;\n      \n      // Prepare update data\n      const updateData: any = {};\n      if (firstName) updateData.firstName = firstName;\n      if (lastName) updateData.lastName = lastName;\n      if (email) updateData.email = email;\n      if (username) updateData.username = username;\n      \n      // Hash password if provided\n      if (password && password.trim() !== '') {\n        const hashedPassword = await hashPassword(password);\n        updateData.password = hashedPassword;\n      }\n      \n      // Update user in storage\n      await storage.updateUserProfile(userId, updateData);\n      \n      // Return updated user data\n      const updatedUser = await storage.getUser(userId);\n      const { password: _, ...safeUser } = updatedUser!;\n      res.json(safeUser);\n    } catch (error) {\n      console.error(\"Error updating user profile:\", error);\n      res.status(500).json({ message: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ®ÿ±ŸàŸÅÿßŸäŸÑ\" });\n    }\n  });\n\n  // Dashboard stats\n  app.get('/api/dashboard/stats', isAuthenticated, async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ¨ŸÑÿ® ÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™ ŸÑŸàÿ≠ÿ© ÿßŸÑÿ™ÿ≠ŸÉŸÖ\" });\n    }\n  });\n\n  // Recent activities\n  app.get('/api/activities', isAuthenticated, async (req, res) => {\n    try {\n      const activities = await storage.getRecentActivities(10);\n      res.json(activities);\n    } catch (error) {\n      console.error(\"Error fetching activities:\", error);\n      res.status(500).json({ message: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ¨ŸÑÿ® ÿßŸÑÿ£ŸÜÿ¥ÿ∑ÿ© ÿßŸÑÿ£ÿÆŸäÿ±ÿ©\" });\n    }\n  });\n\n  // Customer routes\n  app.get('/api/customers', isAuthenticated, async (req, res) => {\n    try {\n      const customers = await storage.getCustomers();\n      res.json(customers);\n    } catch (error) {\n      console.error(\"Error fetching customers:\", error);\n      res.status(500).json({ message: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ¨ŸÑÿ® ÿßŸÑÿπŸÖŸÑÿßÿ°\" });\n    }\n  });\n\n  app.post('/api/customers', isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertCustomerSchema.parse(req.body);\n      const customer = await storage.createCustomer(validatedData);\n      res.status(201).json(customer);\n    } catch (error) {\n      console.error(\"Error creating customer:\", error);\n      res.status(400).json({ message: \"ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿπŸÖŸäŸÑ ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠ÿ©\" });\n    }\n  });\n\n  app.patch('/api/customers/:id/renew', isAuthenticated, async (req, res) => {\n    try {\n      const customer = await storage.getCustomer(req.params.id);\n      if (!customer) {\n        return res.status(404).json({ message: \"ÿßŸÑÿπŸÖŸäŸÑ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ\" });\n      }\n\n      // Extend subscription by one year\n      const currentExpiry = new Date(customer.expiryDate);\n      const newExpiry = new Date(currentExpiry);\n      newExpiry.setFullYear(currentExpiry.getFullYear() + 1);\n\n      const updatedCustomer = await storage.updateCustomer(req.params.id, {\n        expiryDate: newExpiry.toISOString().split('T')[0],\n        isActive: true\n      });\n\n      // Log activity\n      await storage.createActivity({\n        type: 'subscription_renewed',\n        description: `ÿ™ŸÖ ÿ™ÿ¨ÿØŸäÿØ ÿßÿ¥ÿ™ÿ±ÿßŸÉ ÿßŸÑÿπŸÖŸäŸÑ: ${customer.name}`,\n        relatedId: customer.id,\n      });\n\n      res.json(updatedCustomer);\n    } catch (error) {\n      console.error(\"Error renewing subscription:\", error);\n      res.status(500).json({ message: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ™ÿ¨ÿØŸäÿØ ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ\" });\n    }\n  });\n\n  // Update customer\n  app.put('/api/customers/:id', isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertCustomerSchema.parse(req.body);\n      const customer = await storage.updateCustomer(req.params.id, validatedData);\n      \n      if (!customer) {\n        return res.status(404).json({ message: \"ÿßŸÑÿπŸÖŸäŸÑ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ\" });\n      }\n\n      // Log activity\n      await storage.createActivity({\n        type: 'customer_updated',\n        description: `ÿ™ŸÖ ÿ™ÿπÿØŸäŸÑ ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿπŸÖŸäŸÑ: ${customer.name}`,\n        relatedId: customer.id,\n      });\n\n      res.json(customer);\n    } catch (error) {\n      console.error(\"Error updating customer:\", error);\n      res.status(400).json({ message: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ™ÿπÿØŸäŸÑ ÿßŸÑÿπŸÖŸäŸÑ\" });\n    }\n  });\n\n  // Delete customer\n  app.delete('/api/customers/:id', isAuthenticated, async (req, res) => {\n    try {\n      const customer = await storage.getCustomer(req.params.id);\n      if (!customer) {\n        return res.status(404).json({ message: \"ÿßŸÑÿπŸÖŸäŸÑ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ\" });\n      }\n\n      await storage.deleteCustomer(req.params.id);\n      \n      // Log activity\n      await storage.createActivity({\n        type: 'customer_deleted',\n        description: `ÿ™ŸÖ ÿ≠ÿ∞ŸÅ ÿßŸÑÿπŸÖŸäŸÑ: ${customer.name}`,\n        relatedId: customer.id,\n      });\n\n      res.json({ message: \"ÿ™ŸÖ ÿ≠ÿ∞ŸÅ ÿßŸÑÿπŸÖŸäŸÑ ÿ®ŸÜÿ¨ÿßÿ≠\" });\n    } catch (error) {\n      console.error(\"Error deleting customer:\", error);\n      res.status(500).json({ message: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ≠ÿ∞ŸÅ ÿßŸÑÿπŸÖŸäŸÑ\" });\n    }\n  });\n\n  app.get('/api/customers/expiring/:days', isAuthenticated, async (req, res) => {\n    try {\n      const days = parseInt(req.params.days);\n      const expiringCustomers = await storage.getExpiringCustomers(days);\n      res.json(expiringCustomers);\n    } catch (error) {\n      console.error(\"Error fetching expiring customers:\", error);\n      res.status(500).json({ message: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ¨ŸÑÿ® ÿßŸÑÿπŸÖŸÑÿßÿ° ÿßŸÑŸÖŸÜÿ™ŸáŸäŸäŸÜ\" });\n    }\n  });\n\n  // Income routes\n  app.get('/api/income', isAuthenticated, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const start = startDate ? new Date(startDate as string) : undefined;\n      const end = endDate ? new Date(endDate as string) : undefined;\n      \n      const incomeEntries = await storage.getIncomeEntries(start, end);\n      res.json(incomeEntries);\n    } catch (error) {\n      console.error(\"Error fetching income entries:\", error);\n      res.status(500).json({ message: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ¨ŸÑÿ® ÿßŸÑÿ•ÿØÿÆÿßŸÑÿßÿ™\" });\n    }\n  });\n\n  app.post('/api/income', isAuthenticated, upload.single('receipt'), async (req, res) => {\n    try {\n      const validatedData = insertIncomeEntrySchema.parse({\n        ...req.body,\n        receiptUrl: req.file ? `/uploads/${req.file.filename}` : null\n      });\n      \n      const incomeEntry = await storage.createIncomeEntry(validatedData);\n      \n      // Log activity\n      await storage.createActivity({\n        type: 'income_added',\n        description: `ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿ•ÿØÿÆÿßŸÑ ${validatedData.type === 'prints' ? 'ŸÖÿ∑ÿ®Ÿàÿπÿßÿ™' : 'ÿßÿ¥ÿ™ÿ±ÿßŸÉ'} ÿ®ŸÇŸäŸÖÿ© ${validatedData.amount} ÿØ.ÿπ`,\n        relatedId: incomeEntry.id,\n      });\n      \n      res.status(201).json(incomeEntry);\n    } catch (error) {\n      console.error(\"Error creating income entry:\", error);\n      res.status(400).json({ message: \"ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ•ÿØÿÆÿßŸÑ ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠ÿ©\" });\n    }\n  });\n\n  app.put('/api/income/:id', isAuthenticated, upload.single('receipt'), async (req, res) => {\n    try {\n      const validatedData = insertIncomeEntrySchema.parse({\n        ...req.body,\n        receiptUrl: req.file ? `/uploads/${req.file.filename}` : req.body.receiptUrl\n      });\n      \n      const incomeEntry = await storage.updateIncomeEntry(req.params.id, validatedData);\n      \n      if (!incomeEntry) {\n        return res.status(404).json({ message: \"ÿßŸÑÿ•ÿØÿÆÿßŸÑ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ\" });\n      }\n      \n      // Log activity\n      await storage.createActivity({\n        type: 'income_updated',\n        description: `ÿ™ŸÖ ÿ™ÿπÿØŸäŸÑ ÿ•ÿØÿÆÿßŸÑ ÿ®ŸÇŸäŸÖÿ© ${validatedData.amount} ÿØ.ÿπ`,\n        relatedId: incomeEntry.id,\n      });\n      \n      res.json(incomeEntry);\n    } catch (error) {\n      console.error(\"Error updating income entry:\", error);\n      res.status(400).json({ message: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ™ÿπÿØŸäŸÑ ÿßŸÑÿ•ÿØÿÆÿßŸÑ\" });\n    }\n  });\n\n  app.delete('/api/income/:id', isAuthenticated, async (req, res) => {\n    try {\n      const incomeEntry = await storage.getIncomeEntry(req.params.id);\n      if (!incomeEntry) {\n        return res.status(404).json({ message: \"ÿßŸÑÿ•ÿØÿÆÿßŸÑ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ\" });\n      }\n      \n      await storage.deleteIncomeEntry(req.params.id);\n      \n      // Log activity\n      await storage.createActivity({\n        type: 'income_deleted',\n        description: `ÿ™ŸÖ ÿ≠ÿ∞ŸÅ ÿ•ÿØÿÆÿßŸÑ ÿ®ŸÇŸäŸÖÿ© ${incomeEntry.amount} ÿØ.ÿπ`,\n        relatedId: incomeEntry.id,\n      });\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting income entry:\", error);\n      res.status(500).json({ message: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ≠ÿ∞ŸÅ ÿßŸÑÿ•ÿØÿÆÿßŸÑ\" });\n    }\n  });\n\n  app.get('/api/income/prints', isAuthenticated, async (req, res) => {\n    try {\n      const printEntries = await storage.getPrintIncomeEntries();\n      res.json(printEntries);\n    } catch (error) {\n      console.error(\"Error fetching print entries:\", error);\n      res.status(500).json({ message: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ¨ŸÑÿ® ÿßŸÑŸÖÿ∑ÿ®Ÿàÿπÿßÿ™\" });\n    }\n  });\n\n  // Expense routes\n  app.get('/api/expenses', isAuthenticated, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const start = startDate ? new Date(startDate as string) : undefined;\n      const end = endDate ? new Date(endDate as string) : undefined;\n      \n      const expenseEntries = await storage.getExpenseEntries(start, end);\n      res.json(expenseEntries);\n    } catch (error) {\n      console.error(\"Error fetching expense entries:\", error);\n      res.status(500).json({ message: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ¨ŸÑÿ® ÿßŸÑÿ•ÿÆÿ±ÿßÿ¨ÿßÿ™\" });\n    }\n  });\n\n  app.post('/api/expenses', isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertExpenseEntrySchema.parse(req.body);\n      const expenseEntry = await storage.createExpenseEntry(validatedData);\n      \n      // Log activity\n      await storage.createActivity({\n        type: 'expense_added',\n        description: `ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿ•ÿÆÿ±ÿßÿ¨: ${validatedData.reason} ÿ®ŸÇŸäŸÖÿ© ${validatedData.amount} ÿØ.ÿπ`,\n        relatedId: expenseEntry.id,\n      });\n      \n      res.status(201).json(expenseEntry);\n    } catch (error) {\n      console.error(\"Error creating expense entry:\", error);\n      res.status(400).json({ message: \"ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ•ÿÆÿ±ÿßÿ¨ ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠ÿ©\" });\n    }\n  });\n\n  app.put('/api/expenses/:id', isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertExpenseEntrySchema.parse(req.body);\n      const expenseEntry = await storage.updateExpenseEntry(req.params.id, validatedData);\n      \n      if (!expenseEntry) {\n        return res.status(404).json({ message: \"ÿßŸÑÿ•ÿÆÿ±ÿßÿ¨ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ\" });\n      }\n      \n      // Log activity\n      await storage.createActivity({\n        type: 'expense_updated',\n        description: `ÿ™ŸÖ ÿ™ÿπÿØŸäŸÑ ÿ•ÿÆÿ±ÿßÿ¨: ${validatedData.reason} ÿ®ŸÇŸäŸÖÿ© ${validatedData.amount} ÿØ.ÿπ`,\n        relatedId: expenseEntry.id,\n      });\n      \n      res.json(expenseEntry);\n    } catch (error) {\n      console.error(\"Error updating expense entry:\", error);\n      res.status(400).json({ message: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ™ÿπÿØŸäŸÑ ÿßŸÑÿ•ÿÆÿ±ÿßÿ¨\" });\n    }\n  });\n\n  app.delete('/api/expenses/:id', isAuthenticated, async (req, res) => {\n    try {\n      const expenseEntry = await storage.getExpenseEntry(req.params.id);\n      if (!expenseEntry) {\n        return res.status(404).json({ message: \"ÿßŸÑÿ•ÿÆÿ±ÿßÿ¨ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ\" });\n      }\n      \n      await storage.deleteExpenseEntry(req.params.id);\n      \n      // Log activity\n      await storage.createActivity({\n        type: 'expense_deleted',\n        description: `ÿ™ŸÖ ÿ≠ÿ∞ŸÅ ÿ•ÿÆÿ±ÿßÿ¨: ${expenseEntry.reason} ÿ®ŸÇŸäŸÖÿ© ${expenseEntry.amount} ÿØ.ÿπ`,\n        relatedId: expenseEntry.id,\n      });\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting expense entry:\", error);\n      res.status(500).json({ message: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ≠ÿ∞ŸÅ ÿßŸÑÿ•ÿÆÿ±ÿßÿ¨\" });\n    }\n  });\n\n  // Employee routes\n  app.get('/api/employees', isAuthenticated, async (req, res) => {\n    try {\n      const employees = await storage.getEmployees();\n      res.json(employees);\n    } catch (error) {\n      console.error(\"Error fetching employees:\", error);\n      res.status(500).json({ message: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ¨ŸÑÿ® ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ\" });\n    }\n  });\n\n  app.post('/api/employees', isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertEmployeeSchema.parse(req.body);\n      const employee = await storage.createEmployee(validatedData);\n      res.status(201).json(employee);\n    } catch (error) {\n      console.error(\"Error creating employee:\", error);\n      res.status(400).json({ message: \"ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖŸàÿ∏ŸÅ ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠ÿ©\" });\n    }\n  });\n\n  app.delete('/api/employees/:id', isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteEmployee(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting employee:\", error);\n      res.status(500).json({ message: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖŸàÿ∏ŸÅ\" });\n    }\n  });\n\n  // Reports route\n  app.post('/api/reports/generate', isAuthenticated, async (req, res) => {\n    try {\n      const { startDate, endDate, reportType } = req.body;\n      \n      // Get data based on report type\n      let reportData: any = {\n        period: `${startDate} ÿ•ŸÑŸâ ${endDate}`,\n        type: reportType,\n        generatedAt: new Date().toISOString(),\n        generatedBy: \"IQR Control System\",\n      };\n\n      // Fetch data based on report type\n      if (reportType === \"financial\" || reportType === \"comprehensive\") {\n        const start = new Date(startDate);\n        const end = new Date(endDate);\n        \n        reportData.income = await storage.getIncomeEntries(start, end);\n        reportData.expenses = await storage.getExpenseEntries(start, end);\n        \n        // Calculate totals\n        reportData.totalIncome = reportData.income.reduce((sum: number, entry: any) => sum + Number(entry.amount), 0);\n        reportData.totalExpenses = reportData.expenses.reduce((sum: number, entry: any) => sum + Number(entry.amount), 0);\n        reportData.netProfit = reportData.totalIncome - reportData.totalExpenses;\n      }\n\n      if (reportType === \"customers\" || reportType === \"comprehensive\") {\n        reportData.customers = await storage.getCustomers();\n        reportData.totalCustomers = reportData.customers.length;\n        \n        // Customer analytics\n        reportData.expiredCustomers = reportData.customers.filter((c: any) => new Date(c.expiryDate) < new Date());\n        reportData.activeCustomers = reportData.customers.filter((c: any) => c.isActive && new Date(c.expiryDate) >= new Date());\n        reportData.expiringSoon = reportData.customers.filter((c: any) => {\n          const expiry = new Date(c.expiryDate);\n          const today = new Date();\n          const diffTime = expiry.getTime() - today.getTime();\n          const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n          return diffDays <= 30 && diffDays > 0;\n        });\n      }\n\n      if (reportType === \"employees\" || reportType === \"comprehensive\") {\n        reportData.employees = await storage.getEmployees();\n        reportData.totalEmployees = reportData.employees.length;\n        reportData.totalSalaries = reportData.employees.reduce((sum: number, emp: any) => sum + Number(emp.salary || 0), 0);\n      }\n\n      if (reportType === \"prints\" || reportType === \"comprehensive\") {\n        const start = new Date(startDate);\n        const end = new Date(endDate);\n        const allIncome = await storage.getIncomeEntries(start, end);\n        \n        reportData.printIncome = allIncome.filter((entry: any) => entry.type === 'prints');\n        reportData.totalPrintIncome = reportData.printIncome.reduce((sum: number, entry: any) => sum + Number(entry.amount), 0);\n      }\n\n      // Add summary statistics\n      const dashboardStats = await storage.getDashboardStats();\n      reportData.summary = dashboardStats;\n\n      res.json({\n        message: \"ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ™ŸÇÿ±Ÿäÿ± ÿ®ŸÜÿ¨ÿßÿ≠\",\n        data: reportData,\n        success: true\n      });\n    } catch (error) {\n      console.error(\"Error generating report:\", error);\n      res.status(500).json({ message: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ™ŸÇÿ±Ÿäÿ±\" });\n    }\n  });\n\n  // User management routes\n  app.get('/api/users', isAuthenticated, async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      // Don't return password hashes in the response\n      const safeUsers = users.map(user => {\n        const { password, ...safeUser } = user;\n        return safeUser;\n      });\n      res.json(safeUsers);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ¨ŸÑÿ® ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ\" });\n    }\n  });\n\n  app.post('/api/users', isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertManualUserSchema.parse(req.body);\n      \n      // Check if username already exists\n      const existingUser = await storage.getUserByUsername(validatedData.username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"ÿßÿ≥ŸÖ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÖŸàÿ¨ŸàÿØ ÿ®ÿßŸÑŸÅÿπŸÑ\" });\n      }\n      \n      // Hash the password\n      const hashedPassword = await hashPassword(validatedData.password);\n      \n      const user = await storage.createManualUser({\n        ...validatedData,\n        password: hashedPassword,\n      });\n      \n      // Don't return password hash in the response\n      const { password, ...safeUser } = user;\n      res.status(201).json(safeUser);\n    } catch (error: any) {\n      console.error(\"Error creating user:\", error);\n      if (error.name === 'ZodError') {\n        res.status(400).json({ message: \"ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠ÿ©\" });\n      } else {\n        res.status(500).json({ message: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ\" });\n      }\n    }\n  });\n\n  // Serve uploaded files\n  app.use('/uploads', express.static('uploads'));\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":19514},"server/setup-admin.ts":{"content":"\nimport dotenv from \"dotenv\";\n// Load environment variables from .env file\ndotenv.config();\n\nimport { hashPassword } from \"./auth\";\nimport { storage } from \"./storage\";\n\nasync function setupDefaultUser() {\n  try {\n    // Check if admin user already exists\n    const existingUser = await storage.getUserByUsername('admin');\n    if (existingUser) {\n      console.log('‚úÖ Admin user already exists');\n      return;\n    }\n\n    // Create default admin user\n    const hashedPassword = await hashPassword('admin123');\n    const adminUser = await storage.createManualUser({\n      username: 'admin',\n      password: hashedPassword,\n      role: 'admin'\n    });\n\n    console.log('‚úÖ Default admin user created successfully');\n    console.log('üë§ Username: admin');\n    console.log('üîë Password: admin123');\n    \n  } catch (error) {\n    console.error('‚ùå Error setting up admin user:', error);\n  }\n}\n\nsetupDefaultUser();\n","size_bytes":916},"server/storage.ts":{"content":"import {\n  users,\n  customers,\n  incomeEntries,\n  expenseEntries,\n  employees,\n  activities,\n  type User,\n  type UpsertUser,\n  type Customer,\n  type InsertCustomer,\n  type IncomeEntry,\n  type InsertIncomeEntry,\n  type ExpenseEntry,\n  type InsertExpenseEntry,\n  type Employee,\n  type InsertEmployee,\n  type Activity,\n  type InsertActivity,\n  type InsertManualUser,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, gte, lte, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // Manual user operations\n  getAllUsers(): Promise<User[]>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createManualUser(user: InsertManualUser): Promise<User>;\n\n  // Customer operations\n  getCustomers(): Promise<Customer[]>;\n  getCustomer(id: string): Promise<Customer | undefined>;\n  createCustomer(customer: InsertCustomer): Promise<Customer>;\n  updateCustomer(id: string, data: Partial<Customer>): Promise<Customer>;\n  deleteCustomer(id: string): Promise<void>;\n  getExpiringCustomers(days: number): Promise<Customer[]>;\n\n  // Income operations\n  getIncomeEntries(startDate?: Date, endDate?: Date): Promise<IncomeEntry[]>;\n  getIncomeEntry(id: string): Promise<IncomeEntry | undefined>;\n  createIncomeEntry(entry: InsertIncomeEntry): Promise<IncomeEntry>;\n  updateIncomeEntry(id: string, data: Partial<InsertIncomeEntry>): Promise<IncomeEntry | null>;\n  deleteIncomeEntry(id: string): Promise<void>;\n  getPrintIncomeEntries(): Promise<IncomeEntry[]>;\n\n  // Expense operations\n  getExpenseEntries(startDate?: Date, endDate?: Date): Promise<ExpenseEntry[]>;\n  getExpenseEntry(id: string): Promise<ExpenseEntry | undefined>;\n  createExpenseEntry(entry: InsertExpenseEntry): Promise<ExpenseEntry>;\n  updateExpenseEntry(id: string, data: Partial<InsertExpenseEntry>): Promise<ExpenseEntry | null>;\n  deleteExpenseEntry(id: string): Promise<void>;\n  \n\n  // Employee operations\n  getEmployees(): Promise<Employee[]>;\n  createEmployee(employee: InsertEmployee): Promise<Employee>;\n  updateEmployee(id: string, data: Partial<Employee>): Promise<Employee>;\n  deleteEmployee(id: string): Promise<void>;\n\n  // Activity operations\n  getRecentActivities(limit?: number): Promise<Activity[]>;\n  createActivity(activity: InsertActivity): Promise<Activity>;\n\n  // Dashboard statistics\n  getDashboardStats(): Promise<{\n    totalCustomers: number;\n    monthlyIncome: number;\n    expiredSubscriptions: number;\n    currentInventory: number;\n    totalSalaries: number;\n    financialStatus: 'healthy' | 'warning' | 'critical';\n  }>;\n\n  // User profile operations\n  updateUserProfile(userId: string, updates: any): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Manual user operations\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(desc(users.createdAt));\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async createManualUser(userData: InsertManualUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values({\n        ...userData,\n        isManualUser: true,\n      })\n      .returning();\n\n    // Log activity\n    await this.createActivity({\n      type: 'user_created',\n      description: `ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿ≠ÿ≥ÿßÿ® ŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ¨ÿØŸäÿØ: ${userData.username}`,\n      relatedId: user.id,\n    });\n\n    return user;\n  }\n\n  // Customer operations\n  async getCustomers(): Promise<Customer[]> {\n    return await db.select().from(customers).orderBy(desc(customers.createdAt));\n  }\n\n  async getCustomer(id: string): Promise<Customer | undefined> {\n    const [customer] = await db.select().from(customers).where(eq(customers.id, id));\n    return customer;\n  }\n\n  async createCustomer(customerData: InsertCustomer): Promise<Customer> {\n    // Calculate expiry date based on subscription type\n    const joinDate = new Date(customerData.joinDate);\n    let expiryDate = new Date(joinDate);\n\n    switch (customerData.subscriptionType) {\n      case 'annual':\n        expiryDate.setFullYear(joinDate.getFullYear() + 1);\n        break;\n      case 'semi-annual':\n        expiryDate.setMonth(joinDate.getMonth() + 6);\n        break;\n      case 'quarterly':\n        expiryDate.setMonth(joinDate.getMonth() + 3);\n        break;\n    }\n\n    const [customer] = await db\n      .insert(customers)\n      .values({\n        ...customerData,\n        expiryDate: expiryDate.toISOString().split('T')[0],\n      })\n      .returning();\n\n    // Log activity\n    await this.createActivity({\n      type: 'customer_added',\n      description: `ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ÿπŸÖŸäŸÑ ÿ¨ÿØŸäÿØ: ${customer.name}`,\n      relatedId: customer.id,\n    });\n\n    return customer;\n  }\n\n  async updateCustomer(id: string, data: Partial<Customer>): Promise<Customer> {\n    const [customer] = await db\n      .update(customers)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(customers.id, id))\n      .returning();\n    return customer;\n  }\n\n  async deleteCustomer(id: string): Promise<void> {\n    await db.delete(customers).where(eq(customers.id, id));\n  }\n\n  async getExpiringCustomers(days: number): Promise<Customer[]> {\n    const targetDate = new Date();\n    targetDate.setDate(targetDate.getDate() + days);\n\n    return await db\n      .select()\n      .from(customers)\n      .where(\n        sql`${customers.expiryDate} <= ${targetDate.toISOString().split('T')[0]} AND ${customers.isActive} = true`\n      );\n  }\n\n  // Income operations\n  async getIncomeEntries(startDate?: Date, endDate?: Date): Promise<IncomeEntry[]> {\n    if (startDate && endDate) {\n      return await db\n        .select()\n        .from(incomeEntries)\n        .where(\n          sql`${incomeEntries.createdAt} >= ${startDate} AND ${incomeEntries.createdAt} <= ${endDate}`\n        )\n        .orderBy(desc(incomeEntries.createdAt));\n    }\n\n    return await db\n      .select()\n      .from(incomeEntries)\n      .orderBy(desc(incomeEntries.createdAt));\n  }\n\n  async createIncomeEntry(entryData: InsertIncomeEntry): Promise<IncomeEntry> {\n    const [entry] = await db\n      .insert(incomeEntries)\n      .values(entryData)\n      .returning();\n\n    // Log activity\n    await this.createActivity({\n      type: 'income_added',\n      description: `ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿØÿÆŸÑ ÿ®ŸÇŸäŸÖÿ© ${entryData.amount} ÿØ.ÿπ`,\n      relatedId: entry.id,\n    });\n\n    return entry;\n  }\n\n  async getPrintIncomeEntries(): Promise<IncomeEntry[]> {\n    return await db\n      .select()\n      .from(incomeEntries)\n      .where(eq(incomeEntries.type, 'prints'))\n      .orderBy(desc(incomeEntries.createdAt));\n  }\n\n  // Expense operations\n  async getExpenseEntries(startDate?: Date, endDate?: Date): Promise<ExpenseEntry[]> {\n    if (startDate && endDate) {\n      return await db\n        .select()\n        .from(expenseEntries)\n        .where(\n          sql`${expenseEntries.createdAt} >= ${startDate} AND ${expenseEntries.createdAt} <= ${endDate}`\n        )\n        .orderBy(desc(expenseEntries.createdAt));\n    }\n\n    return await db\n      .select()\n      .from(expenseEntries)\n      .orderBy(desc(expenseEntries.createdAt));\n  }\n\n  async createExpenseEntry(entryData: InsertExpenseEntry): Promise<ExpenseEntry> {\n    const [entry] = await db\n      .insert(expenseEntries)\n      .values(entryData)\n      .returning();\n\n    // Log activity\n    await this.createActivity({\n      type: 'expense_added',\n      description: `ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ŸÖÿµÿ±ŸàŸÅ ÿ®ŸÇŸäŸÖÿ© ${entryData.amount} ÿØ.ÿπ - ${entryData.reason}`,\n      relatedId: entry.id,\n    });\n\n    return entry;\n  }\n\n  async getIncomeEntry(id: string): Promise<IncomeEntry | undefined> {\n    const [entry] = await db.select().from(incomeEntries).where(eq(incomeEntries.id, id));\n    return entry;\n  }\n\n  async updateIncomeEntry(id: string, data: Partial<InsertIncomeEntry>): Promise<IncomeEntry | null> {\n    const [entry] = await db\n      .update(incomeEntries)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(incomeEntries.id, id))\n      .returning();\n    return entry || null;\n  }\n\n  async deleteIncomeEntry(id: string): Promise<void> {\n    await db.delete(incomeEntries).where(eq(incomeEntries.id, id));\n  }\n\n  async getExpenseEntry(id: string): Promise<ExpenseEntry | undefined> {\n    const [entry] = await db.select().from(expenseEntries).where(eq(expenseEntries.id, id));\n    return entry;\n  }\n\n  async updateExpenseEntry(id: string, data: Partial<InsertExpenseEntry>): Promise<ExpenseEntry | null> {\n    const [entry] = await db\n      .update(expenseEntries)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(expenseEntries.id, id))\n      .returning();\n    return entry || null;\n  }\n\n  async deleteExpenseEntry(id: string): Promise<void> {\n    await db.delete(expenseEntries).where(eq(expenseEntries.id, id));\n  }\n\n  // Employee operations\n  async getEmployees(): Promise<Employee[]> {\n    return await db\n      .select()\n      .from(employees)\n      .where(eq(employees.isActive, true))\n      .orderBy(desc(employees.createdAt));\n  }\n\n  async createEmployee(employeeData: InsertEmployee): Promise<Employee> {\n    const [employee] = await db\n      .insert(employees)\n      .values(employeeData)\n      .returning();\n\n    // Log activity\n    await this.createActivity({\n      type: 'employee_added',\n      description: `ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ŸÖŸàÿ∏ŸÅ ÿ¨ÿØŸäÿØ: ${employee.name}`,\n      relatedId: employee.id,\n    });\n\n    return employee;\n  }\n\n  async updateEmployee(id: string, data: Partial<Employee>): Promise<Employee> {\n    const [employee] = await db\n      .update(employees)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(employees.id, id))\n      .returning();\n    return employee;\n  }\n\n  async deleteEmployee(id: string): Promise<void> {\n    await db\n      .update(employees)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(employees.id, id));\n  }\n\n  // Activity operations\n  async getRecentActivities(limit = 10): Promise<Activity[]> {\n    return await db\n      .select()\n      .from(activities)\n      .orderBy(desc(activities.createdAt))\n      .limit(limit);\n  }\n\n  async createActivity(activityData: InsertActivity): Promise<Activity> {\n    const [activity] = await db\n      .insert(activities)\n      .values(activityData)\n      .returning();\n    return activity;\n  }\n\n  // Dashboard statistics\n  async getDashboardStats() {\n    const now = new Date();\n    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n    const endOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0);\n\n    // Total customers\n    const [{ count: totalCustomers }] = await db\n      .select({ count: sql<number>`cast(count(*) as integer)` })\n      .from(customers)\n      .where(eq(customers.isActive, true));\n\n    // Monthly income\n    const monthlyIncomeResult = await db\n      .select({ total: sql<number>`cast(coalesce(sum(cast(amount as decimal)), 0) as decimal)` })\n      .from(incomeEntries)\n      .where(sql`${incomeEntries.createdAt} >= ${startOfMonth} AND ${incomeEntries.createdAt} <= ${endOfMonth}`);\n    const monthlyIncome = Number(monthlyIncomeResult[0]?.total || 0);\n\n    // Expired subscriptions\n    const today = new Date().toISOString().split('T')[0];\n    const [{ count: expiredSubscriptions }] = await db\n      .select({ count: sql<number>`cast(count(*) as integer)` })\n      .from(customers)\n      .where(sql`${customers.expiryDate} < ${today} AND ${customers.isActive} = true`);\n\n    // Current inventory (total income - total expenses)\n    const totalIncomeResult = await db\n      .select({ total: sql<number>`cast(coalesce(sum(cast(amount as decimal)), 0) as decimal)` })\n      .from(incomeEntries);\n    const totalIncome = Number(totalIncomeResult[0]?.total || 0);\n\n    const totalExpensesResult = await db\n      .select({ total: sql<number>`cast(coalesce(sum(cast(amount as decimal)), 0) as decimal)` })\n      .from(expenseEntries);\n    const totalExpenses = Number(totalExpensesResult[0]?.total || 0);\n\n    const currentInventory = totalIncome - totalExpenses;\n\n    // Total salaries\n    const totalSalariesResult = await db\n      .select({ total: sql<number>`cast(coalesce(sum(cast(salary as decimal)), 0) as decimal)` })\n      .from(employees)\n      .where(eq(employees.isActive, true));\n    const totalSalaries = Number(totalSalariesResult[0]?.total || 0);\n\n    // Financial status\n    let financialStatus: 'healthy' | 'warning' | 'critical' = 'healthy';\n    if (currentInventory < totalSalaries) {\n      financialStatus = 'critical';\n    } else if (currentInventory < totalSalaries * 1.5) {\n      financialStatus = 'warning';\n    }\n\n    return {\n      totalCustomers,\n      monthlyIncome,\n      expiredSubscriptions,\n      currentInventory,\n      totalSalaries,\n      financialStatus,\n    };\n  }\n\n  async updateUserProfile(userId: string, updates: any): Promise<void> {\n    // For Replit auth users, we'll store additional profile info in a separate table\n    // For now, we'll just log the update since Replit auth handles the main user data\n    console.log(`Updating profile for user ${userId}:`, updates);\n\n    // In a real implementation, you would update the user data in your database\n    // For this demo, we'll just acknowledge the update\n    return Promise.resolve();\n  }\n}\n\n// In-Memory storage for when database is unavailable\nclass MemoryStorage implements IStorage {\n  private users: User[] = [];\n  private customers: Customer[] = [];\n  private incomeEntries: IncomeEntry[] = [];\n  private expenseEntries: ExpenseEntry[] = [];\n  private employees: Employee[] = [];\n  private activities: Activity[] = [];\n\n  constructor() {\n    console.log(\"‚ö†Ô∏è  Using in-memory storage - data will be lost on restart\");\n    \n    // Create a default admin user with hashed password for \"admin123\"\n    const defaultAdmin: User = {\n      id: 'admin-user-id',\n      username: 'admin',\n      password: 'aacd577222cb7e3ede873ed2491b619ca18bde0e8cf2231f606923683ab540653d130d290ebbf01bc4740bdccded1cf7c952183b559ec3eaf5609711279766e5.3ec62ec2f28cb947c4a08138b983023f',\n      firstName: 'ŸÖÿØŸäÿ±',\n      lastName: 'ÿßŸÑŸÜÿ∏ÿßŸÖ',\n      email: 'admin@system.com',\n      profileImageUrl: null,\n      role: 'admin',\n      isManualUser: true,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    \n    this.users.push(defaultAdmin);\n  }\n\n  // Helper function to generate IDs\n  private generateId(): string {\n    return `mem_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.find(u => u.id === id);\n  }\n\n  async upsertUser(user: UpsertUser): Promise<User> {\n    const existingIndex = this.users.findIndex(u => u.id === user.id);\n    const newUser: User = { \n      ...user, \n      id: user.id || this.generateId(), \n      createdAt: new Date(), \n      updatedAt: new Date() \n    } as User;\n    \n    if (existingIndex >= 0) {\n      this.users[existingIndex] = newUser;\n    } else {\n      this.users.push(newUser);\n    }\n    return newUser;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return [...this.users];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return this.users.find(u => u.username === username);\n  }\n\n  async createManualUser(userData: InsertManualUser): Promise<User> {\n    const newUser: User = { \n      ...userData, \n      id: this.generateId(), \n      isManualUser: true, \n      createdAt: new Date(), \n      updatedAt: new Date() \n    } as User;\n    \n    this.users.push(newUser);\n    \n    // Log activity\n    await this.createActivity({\n      type: 'user_created',\n      description: `ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿ≠ÿ≥ÿßÿ® ŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ¨ÿØŸäÿØ: ${userData.username}`,\n      relatedId: newUser.id,\n    });\n    \n    return newUser;\n  }\n\n  async getCustomers(): Promise<Customer[]> {\n    return [...this.customers].sort((a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0));\n  }\n\n  async getCustomer(id: string): Promise<Customer | undefined> {\n    return this.customers.find(c => c.id === id);\n  }\n\n  async createCustomer(customerData: InsertCustomer): Promise<Customer> {\n    // Calculate expiry date based on subscription type\n    const joinDate = new Date(customerData.joinDate);\n    let expiryDate = new Date(joinDate);\n\n    switch (customerData.subscriptionType) {\n      case 'annual':\n        expiryDate.setFullYear(joinDate.getFullYear() + 1);\n        break;\n      case 'semi-annual':\n        expiryDate.setMonth(joinDate.getMonth() + 6);\n        break;\n      case 'quarterly':\n        expiryDate.setMonth(joinDate.getMonth() + 3);\n        break;\n    }\n\n    const customer: Customer = {\n      ...customerData,\n      id: this.generateId(),\n      expiryDate: expiryDate.toISOString().split('T')[0],\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    } as Customer;\n    \n    this.customers.push(customer);\n    \n    // Log activity\n    await this.createActivity({\n      type: 'customer_added',\n      description: `ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ÿπŸÖŸäŸÑ ÿ¨ÿØŸäÿØ: ${customer.name}`,\n      relatedId: customer.id,\n    });\n    \n    return customer;\n  }\n\n  async updateCustomer(id: string, data: Partial<Customer>): Promise<Customer> {\n    const index = this.customers.findIndex(c => c.id === id);\n    if (index >= 0) {\n      this.customers[index] = { ...this.customers[index], ...data, updatedAt: new Date() };\n      return this.customers[index];\n    }\n    throw new Error('Customer not found');\n  }\n\n  async deleteCustomer(id: string): Promise<void> {\n    const index = this.customers.findIndex(c => c.id === id);\n    if (index >= 0) {\n      this.customers.splice(index, 1);\n    }\n  }\n\n  async getExpiringCustomers(days: number): Promise<Customer[]> {\n    const targetDate = new Date();\n    targetDate.setDate(targetDate.getDate() + days);\n    return this.customers.filter(c => \n      c.isActive && new Date(c.expiryDate) <= targetDate\n    );\n  }\n\n  async getIncomeEntries(startDate?: Date, endDate?: Date): Promise<IncomeEntry[]> {\n    let filtered = [...this.incomeEntries];\n    if (startDate && endDate) {\n      filtered = filtered.filter(entry => \n        entry.createdAt && entry.createdAt >= startDate && entry.createdAt <= endDate\n      );\n    }\n    return filtered.sort((a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0));\n  }\n\n  async createIncomeEntry(entryData: InsertIncomeEntry): Promise<IncomeEntry> {\n    const entry: IncomeEntry = {\n      ...entryData,\n      id: this.generateId(),\n      createdAt: new Date()\n    } as IncomeEntry;\n    \n    this.incomeEntries.push(entry);\n    \n    // Log activity\n    await this.createActivity({\n      type: 'income_added',\n      description: `ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿØÿÆŸÑ ÿ®ŸÇŸäŸÖÿ© ${entryData.amount} ÿØ.ÿπ`,\n      relatedId: entry.id,\n    });\n    \n    return entry;\n  }\n\n  async getPrintIncomeEntries(): Promise<IncomeEntry[]> {\n    return this.incomeEntries.filter(entry => entry.type === 'prints')\n      .sort((a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0));\n  }\n\n  async getExpenseEntries(startDate?: Date, endDate?: Date): Promise<ExpenseEntry[]> {\n    let filtered = [...this.expenseEntries];\n    if (startDate && endDate) {\n      filtered = filtered.filter(entry => \n        entry.createdAt && entry.createdAt >= startDate && entry.createdAt <= endDate\n      );\n    }\n    return filtered.sort((a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0));\n  }\n\n  async createExpenseEntry(entryData: InsertExpenseEntry): Promise<ExpenseEntry> {\n    const entry: ExpenseEntry = {\n      ...entryData,\n      id: this.generateId(),\n      createdAt: new Date()\n    } as ExpenseEntry;\n    \n    this.expenseEntries.push(entry);\n    \n    // Log activity\n    await this.createActivity({\n      type: 'expense_added',\n      description: `ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ŸÖÿµÿ±ŸàŸÅ ÿ®ŸÇŸäŸÖÿ© ${entryData.amount} ÿØ.ÿπ - ${entryData.reason}`,\n      relatedId: entry.id,\n    });\n    \n    return entry;\n  }\n\n  async getEmployees(): Promise<Employee[]> {\n    return this.employees.filter(e => e.isActive)\n      .sort((a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0));\n  }\n\n  async createEmployee(employeeData: InsertEmployee): Promise<Employee> {\n    const employee: Employee = {\n      ...employeeData,\n      id: this.generateId(),\n      createdAt: new Date(),\n      updatedAt: new Date()\n    } as Employee;\n    \n    this.employees.push(employee);\n    \n    // Log activity\n    await this.createActivity({\n      type: 'employee_added',\n      description: `ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ŸÖŸàÿ∏ŸÅ ÿ¨ÿØŸäÿØ: ${employee.name}`,\n      relatedId: employee.id,\n    });\n    \n    return employee;\n  }\n\n  async updateEmployee(id: string, data: Partial<Employee>): Promise<Employee> {\n    const index = this.employees.findIndex(e => e.id === id);\n    if (index >= 0) {\n      this.employees[index] = { ...this.employees[index], ...data, updatedAt: new Date() };\n      return this.employees[index];\n    }\n    throw new Error('Employee not found');\n  }\n\n  async deleteEmployee(id: string): Promise<void> {\n    const index = this.employees.findIndex(e => e.id === id);\n    if (index >= 0) {\n      this.employees[index] = { ...this.employees[index], isActive: false, updatedAt: new Date() };\n    }\n  }\n\n  async getRecentActivities(limit = 10): Promise<Activity[]> {\n    return this.activities\n      .sort((a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0))\n      .slice(0, limit);\n  }\n\n  async createActivity(activityData: InsertActivity): Promise<Activity> {\n    const activity: Activity = {\n      ...activityData,\n      id: this.generateId(),\n      createdAt: new Date()\n    } as Activity;\n    \n    this.activities.push(activity);\n    return activity;\n  }\n\n  async getDashboardStats() {\n    const now = new Date();\n    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n    const endOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0);\n\n    // Calculate stats from in-memory data\n    const totalCustomers = this.customers.filter(c => c.isActive !== false).length;\n    \n    const monthlyIncome = this.incomeEntries\n      .filter(entry => entry.createdAt && entry.createdAt >= startOfMonth && entry.createdAt <= endOfMonth)\n      .reduce((sum, entry) => sum + Number(entry.amount || 0), 0);\n\n    const today = new Date().toISOString().split('T')[0];\n    const expiredSubscriptions = this.customers.filter(c => \n      c.isActive && c.expiryDate < today\n    ).length;\n\n    const totalIncome = this.incomeEntries.reduce((sum, entry) => sum + Number(entry.amount || 0), 0);\n    const totalExpensesValue = this.expenseEntries.reduce((sum, entry) => sum + Number(entry.amount || 0), 0);\n    const currentInventory = totalIncome - totalExpensesValue;\n\n    const totalSalaries = this.employees\n      .filter(e => e.isActive)\n      .reduce((sum, emp) => sum + Number(emp.salary || 0), 0);\n\n    // Financial status\n    let financialStatus: 'healthy' | 'warning' | 'critical' = 'healthy';\n    if (currentInventory < totalSalaries) {\n      financialStatus = 'critical';\n    } else if (currentInventory < totalSalaries * 1.5) {\n      financialStatus = 'warning';\n    }\n\n    return {\n      totalCustomers,\n      monthlyIncome,\n      expiredSubscriptions,\n      currentInventory,\n      totalSalaries,\n      financialStatus,\n    };\n  }\n\n  async updateUserProfile(userId: string, updates: any): Promise<void> {\n    const index = this.users.findIndex(u => u.id === userId);\n    if (index >= 0) {\n      this.users[index] = { ...this.users[index], ...updates, updatedAt: new Date() };\n    }\n  }\n}\n\n// Create storage instance - use database if available, otherwise fallback to memory\nexport const storage: IStorage = db ? new DatabaseStorage() : new MemoryStorage();","size_bytes":24362},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  decimal,\n  boolean,\n  date\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  username: varchar(\"username\").unique(), // for manual user creation\n  password: varchar(\"password\"), // hashed password for manual user creation\n  role: varchar(\"role\").default('viewer'), // viewer, editor, admin\n  isManualUser: boolean(\"is_manual_user\").default(false), // distinguish between Replit Auth users and manual users\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Customers table\nexport const customers = pgTable(\"customers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  menuUrl: text(\"menu_url\"),\n  joinDate: date(\"join_date\").notNull(),\n  subscriptionType: varchar(\"subscription_type\").notNull(), // annual, semi-annual, quarterly\n  expiryDate: date(\"expiry_date\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Income entries table\nexport const incomeEntries = pgTable(\"income_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customerId: varchar(\"customer_id\").references(() => customers.id),\n  type: varchar(\"type\").notNull(), // prints, subscription\n  printType: text(\"print_type\"), // only if type is prints\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  receiptUrl: text(\"receipt_url\"),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Expense entries table\nexport const expenseEntries = pgTable(\"expense_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  reason: text(\"reason\").notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Employees table\nexport const employees = pgTable(\"employees\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  position: text(\"position\"),\n  salary: decimal(\"salary\", { precision: 10, scale: 2 }).notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Activities log table for recent activities\nexport const activities = pgTable(\"activities\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  type: varchar(\"type\").notNull(), // customer_added, payment_received, warning_sent, etc.\n  description: text(\"description\").notNull(),\n  relatedId: varchar(\"related_id\"), // ID of related entity\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Create insert schemas\nexport const insertCustomerSchema = createInsertSchema(customers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  expiryDate: true, // calculated automatically\n});\n\nexport const insertIncomeEntrySchema = createInsertSchema(incomeEntries).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertExpenseEntrySchema = createInsertSchema(expenseEntries).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertEmployeeSchema = createInsertSchema(employees).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertActivitySchema = createInsertSchema(activities).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertManualUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  email: true, // not required for manual users\n  firstName: true, // not required for manual users\n  lastName: true, // not required for manual users\n  profileImageUrl: true, // not required for manual users\n}).extend({\n  username: z.string().min(3, \"ÿßÿ≥ŸÖ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ Ÿäÿ¨ÿ® ÿ£ŸÜ ŸäŸÉŸàŸÜ 3 ÿ£ÿ≠ÿ±ŸÅ ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ\"),\n  password: z.string().min(6, \"ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± Ÿäÿ¨ÿ® ÿ£ŸÜ ÿ™ŸÉŸàŸÜ 6 ÿ£ÿ≠ÿ±ŸÅ ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ\"),\n  role: z.enum([\"viewer\", \"editor\", \"admin\"]).default(\"viewer\"),\n});\n\n// Export types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type InsertManualUser = z.infer<typeof insertManualUserSchema>;\nexport type Customer = typeof customers.$inferSelect;\nexport type InsertCustomer = z.infer<typeof insertCustomerSchema>;\nexport type IncomeEntry = typeof incomeEntries.$inferSelect;\nexport type InsertIncomeEntry = z.infer<typeof insertIncomeEntrySchema>;\nexport type ExpenseEntry = typeof expenseEntries.$inferSelect;\nexport type InsertExpenseEntry = z.infer<typeof insertExpenseEntrySchema>;\nexport type Employee = typeof employees.$inferSelect;\nexport type InsertEmployee = z.infer<typeof insertEmployeeSchema>;\nexport type Activity = typeof activities.$inferSelect;\nexport type InsertActivity = z.infer<typeof insertActivitySchema>;\n","size_bytes":5674},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Customers from \"@/pages/customers\";\nimport Income from \"@/pages/income\";\nimport Expenses from \"@/pages/expenses\";\nimport Prints from \"@/pages/prints\";\nimport Employees from \"@/pages/employees\";\nimport Reports from \"@/pages/reports\";\nimport UserManagement from \"@/pages/user-management\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Login} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/customers\" component={Customers} />\n          <Route path=\"/income\" component={Income} />\n          <Route path=\"/expenses\" component={Expenses} />\n          <Route path=\"/prints\" component={Prints} />\n          <Route path=\"/employees\" component={Employees} />\n          <Route path=\"/reports\" component={Reports} />\n          <Route path=\"/user-management\" component={UserManagement} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"font-arabic min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-700 text-white\" dir=\"rtl\">\n          <Toaster />\n          <Router />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1837},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+Arabic:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(262.1, 83.3%, 57.8%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(262.1, 83.3%, 57.8%);\n  --font-sans: 'Noto Sans Arabic', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1rem;\n  \n  /* Custom gradient colors */\n  --gradient-purple-from: hsl(262.1, 50%, 50%);\n  --gradient-purple-to: hsl(259.8, 89.5%, 65.9%);\n  --gradient-green-from: hsl(142.1, 76.2%, 36.3%);\n  --gradient-green-to: hsl(160.1, 84.1%, 39.4%);\n  --gradient-blue-from: hsl(213.3, 93.9%, 67.8%);\n  --gradient-blue-to: hsl(221.2, 83.2%, 53.3%);\n  --gradient-orange-from: hsl(32.1, 94.6%, 43.7%);\n  --gradient-orange-to: hsl(20.5, 90.2%, 48.2%);\n  --gradient-red-from: hsl(0, 84.2%, 60.2%);\n  --gradient-red-to: hsl(0, 72.2%, 50.6%);\n  --gradient-cyan-from: hsl(189.2, 94.5%, 42.7%);\n  --gradient-cyan-to: hsl(188.7, 85.7%, 46.1%);\n  --gradient-pink-from: hsl(322.1, 84%, 60.5%);\n  --gradient-pink-to: hsl(316.7, 77%, 47.6%);\n  --gradient-indigo-from: hsl(259.8, 89.5%, 65.9%);\n  --gradient-indigo-to: hsl(262.1, 83.3%, 57.8%);\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(262.1, 83.3%, 57.8%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(262.1, 83.3%, 57.8%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer components {\n  .glass-card {\n    @apply bg-white/10 backdrop-blur-lg border border-white/20;\n  }\n  \n  .gradient-bg {\n    background: linear-gradient(-45deg, #0F172A, #1E293B, #334155, #1E293B);\n    background-size: 400% 400%;\n    animation: gradient 15s ease infinite;\n  }\n  \n  .gradient-purple {\n    background: linear-gradient(135deg, var(--gradient-purple-from) 0%, var(--gradient-purple-to) 100%);\n  }\n  \n  .gradient-green {\n    background: linear-gradient(135deg, var(--gradient-green-from) 0%, var(--gradient-green-to) 100%);\n  }\n  \n  .gradient-blue {\n    background: linear-gradient(135deg, var(--gradient-blue-from) 0%, var(--gradient-blue-to) 100%);\n  }\n  \n  .gradient-orange {\n    background: linear-gradient(135deg, var(--gradient-orange-from) 0%, var(--gradient-orange-to) 100%);\n  }\n  \n  .gradient-red {\n    background: linear-gradient(135deg, var(--gradient-red-from) 0%, var(--gradient-red-to) 100%);\n  }\n  \n  .gradient-cyan {\n    background: linear-gradient(135deg, var(--gradient-cyan-from) 0%, var(--gradient-cyan-to) 100%);\n  }\n  \n  .gradient-pink {\n    background: linear-gradient(135deg, var(--gradient-pink-from) 0%, var(--gradient-pink-to) 100%);\n  }\n  \n  .gradient-indigo {\n    background: linear-gradient(135deg, var(--gradient-indigo-from) 0%, var(--gradient-indigo-to) 100%);\n  }\n}\n\n@layer utilities {\n  .font-arabic {\n    font-family: 'Noto Sans Arabic', sans-serif;\n  }\n}\n\n@keyframes gradient {\n  0%, 100% { background-position: 0% 50%; }\n  50% { background-position: 100% 50%; }\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-10px); }\n}\n\n@keyframes glow {\n  0% { box-shadow: 0 0 20px rgba(139, 95, 191, 0.3); }\n  100% { box-shadow: 0 0 30px rgba(139, 95, 191, 0.6); }\n}\n\n.animate-float {\n  animation: float 3s ease-in-out infinite;\n}\n\n.animate-glow {\n  animation: glow 2s ease-in-out infinite alternate;\n}\n","size_bytes":4681},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery, useQueryClient } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const queryClient = useQueryClient();\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  const logout = async () => {\n    try {\n      const response = await fetch(\"/api/auth/logout\", {\n        method: \"POST\",\n        credentials: \"include\",\n      });\n      \n      if (response.ok) {\n        // Clear all cached data\n        queryClient.clear();\n        // Invalidate the current user query\n        queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      } else {\n        throw new Error(\"Logout failed\");\n      }\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n      throw error;\n    }\n  };\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    logout,\n  };\n}\n","size_bytes":864},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/customers.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Link } from \"wouter\";\nimport { ArrowRight, Plus, RotateCcw, ExternalLink, Calendar, AlertTriangle, Edit, Trash2 } from \"lucide-react\";\nimport { Header } from \"@/components/layout/header\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { insertCustomerSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function Customers() {\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [editingCustomer, setEditingCustomer] = useState<any | null>(null);\n  const [renewingCustomerId, setRenewingCustomerId] = useState<string | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm({\n    resolver: zodResolver(insertCustomerSchema),\n    defaultValues: {\n      name: \"\",\n      menuUrl: \"\",\n      joinDate: new Date().toISOString().split('T')[0],\n      subscriptionType: \"annual\",\n    },\n  });\n\n  const editForm = useForm({\n    resolver: zodResolver(insertCustomerSchema),\n    defaultValues: {\n      name: \"\",\n      menuUrl: \"\",\n      joinDate: \"\",\n      subscriptionType: \"annual\",\n    },\n  });\n\n  const { data: customers, isLoading, error: customersError } = useQuery({\n    queryKey: [\"/api/customers\"]\n  });\n\n  if (customersError && isUnauthorizedError(customersError as Error)) {\n    toast({\n      title: \"ÿ∫Ÿäÿ± ŸÖÿµÿ±ÿ≠\",\n      description: \"ÿ¨ÿßÿ±Ÿä ÿ•ÿπÿßÿØÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ...\",\n      variant: \"destructive\",\n    });\n    setTimeout(() => {\n      window.location.href = \"/api/login\";\n    }, 500);\n  }\n\n  const addCustomerMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/customers\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      setIsAddDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"ÿ™ŸÖ ÿ®ŸÜÿ¨ÿßÿ≠\",\n        description: \"ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿπŸÖŸäŸÑ ÿ®ŸÜÿ¨ÿßÿ≠\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"ÿ∫Ÿäÿ± ŸÖÿµÿ±ÿ≠\",\n          description: \"ÿ¨ÿßÿ±Ÿä ÿ•ÿπÿßÿØÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"ÿÆÿ∑ÿ£\",\n        description: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿπŸÖŸäŸÑ\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const renewSubscriptionMutation = useMutation({\n    mutationFn: async (customerId: string) => {\n      return await apiRequest(\"PATCH\", `/api/customers/${customerId}/renew`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"ÿ™ŸÖ ÿßŸÑÿ™ÿ¨ÿØŸäÿØ\",\n        description: \"ÿ™ŸÖ ÿ™ÿ¨ÿØŸäÿØ ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ ŸÑÿ≥ŸÜÿ© ÿ•ÿ∂ÿßŸÅŸäÿ©\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"ÿ∫Ÿäÿ± ŸÖÿµÿ±ÿ≠\",\n          description: \"ÿ¨ÿßÿ±Ÿä ÿ•ÿπÿßÿØÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"ÿÆÿ∑ÿ£\",\n        description: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ™ÿ¨ÿØŸäÿØ ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateCustomerMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return await apiRequest(\"PUT\", `/api/customers/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      setIsEditDialogOpen(false);\n      setEditingCustomer(null);\n      editForm.reset();\n      toast({\n        title: \"ÿ™ŸÖ ÿßŸÑÿ™ÿ≠ÿØŸäÿ´\",\n        description: \"ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿ´ ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿπŸÖŸäŸÑ ÿ®ŸÜÿ¨ÿßÿ≠\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"ÿ∫Ÿäÿ± ŸÖÿµÿ±ÿ≠\",\n          description: \"ÿ¨ÿßÿ±Ÿä ÿ•ÿπÿßÿØÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"ÿÆÿ∑ÿ£\",\n        description: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿπŸÖŸäŸÑ\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteCustomerMutation = useMutation({\n    mutationFn: async (customerId: string) => {\n      return await apiRequest(\"DELETE\", `/api/customers/${customerId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"ÿ™ŸÖ ÿßŸÑÿ≠ÿ∞ŸÅ\",\n        description: \"ÿ™ŸÖ ÿ≠ÿ∞ŸÅ ÿßŸÑÿπŸÖŸäŸÑ ÿ®ŸÜÿ¨ÿßÿ≠\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"ÿ∫Ÿäÿ± ŸÖÿµÿ±ÿ≠\",\n          description: \"ÿ¨ÿßÿ±Ÿä ÿ•ÿπÿßÿØÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"ÿÆÿ∑ÿ£\",\n        description: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ≠ÿ∞ŸÅ ÿßŸÑÿπŸÖŸäŸÑ\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    addCustomerMutation.mutate(data);\n  };\n\n  const onEditSubmit = (data: any) => {\n    if (editingCustomer) {\n      updateCustomerMutation.mutate({ id: editingCustomer.id, data });\n    }\n  };\n\n  const handleEditCustomer = (customer: any) => {\n    setEditingCustomer(customer);\n    editForm.reset({\n      name: customer.name,\n      menuUrl: customer.menuUrl || \"\",\n      joinDate: customer.joinDate,\n      subscriptionType: customer.subscriptionType,\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleDeleteCustomer = (customerId: string) => {\n    deleteCustomerMutation.mutate(customerId);\n  };\n\n  const handleRenewSubscription = (customerId: string) => {\n    renewSubscriptionMutation.mutate(customerId);\n    setRenewingCustomerId(null);\n  };\n\n  const isExpired = (expiryDate: string) => {\n    return new Date(expiryDate) < new Date();\n  };\n\n  const isExpiringSoon = (expiryDate: string) => {\n    const expiry = new Date(expiryDate);\n    const today = new Date();\n    const diffTime = expiry.getTime() - today.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return diffDays <= 30 && diffDays > 0;\n  };\n\n  return (\n    <div className=\"min-h-screen gradient-bg\">\n      <Header />\n      \n      <main className=\"max-w-7xl mx-auto px-6 py-8\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center space-x-4 space-x-reverse\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back\">\n                <ArrowRight className=\"w-4 h-4 ml-2\" />\n                ÿßŸÑÿπŸàÿØÿ© ŸÑŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©\n              </Button>\n            </Link>\n            <div>\n              <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿπŸÖŸÑÿßÿ°</h1>\n              <p className=\"text-gray-300\" data-testid=\"text-page-subtitle\">ÿ•ÿ∂ÿßŸÅÿ© Ÿàÿ•ÿØÿßÿ±ÿ© ÿπŸÖŸÑÿßÿ° ÿßŸÑŸÜÿ∏ÿßŸÖ</p>\n            </div>\n          </div>\n          \n          <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gradient-purple hover:scale-105 transition-transform\" data-testid=\"button-add-customer\">\n                <Plus className=\"w-4 h-4 ml-2\" />\n                ÿ•ÿ∂ÿßŸÅÿ© ÿπŸÖŸäŸÑ\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-md glass-card border-white/20\">\n              <DialogHeader>\n                <DialogTitle data-testid=\"text-dialog-title\">ÿ•ÿ∂ÿßŸÅÿ© ÿπŸÖŸäŸÑ ÿ¨ÿØŸäÿØ</DialogTitle>\n              </DialogHeader>\n              \n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>ÿßÿ≥ŸÖ ÿßŸÑÿπŸÖŸäŸÑ</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"ÿ£ÿØÿÆŸÑ ÿßÿ≥ŸÖ ÿßŸÑÿπŸÖŸäŸÑ\" \n                            className=\"glass-card border-white/20 focus:border-purple-400\"\n                            data-testid=\"input-customer-name\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"menuUrl\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>ÿ±ÿßÿ®ÿ∑ ÿßŸÑŸÖŸÜŸäŸà</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"https://example.com/menu\" \n                            className=\"glass-card border-white/20 focus:border-purple-400\"\n                            data-testid=\"input-menu-url\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"joinDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿßŸÜÿ∂ŸÖÿßŸÖ</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"date\" \n                            className=\"glass-card border-white/20 focus:border-purple-400\"\n                            data-testid=\"input-join-date\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"subscriptionType\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>ŸÜŸàÿπ ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger className=\"glass-card border-white/20\" data-testid=\"select-subscription-type\">\n                              <SelectValue placeholder=\"ÿßÿÆÿ™ÿ± ŸÜŸàÿπ ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"annual\">ÿ≥ŸÜŸàŸä</SelectItem>\n                            <SelectItem value=\"semi-annual\">ŸÜÿµŸÅ ÿ≥ŸÜŸàŸä</SelectItem>\n                            <SelectItem value=\"quarterly\">ÿ±ÿ®ÿπ ÿ≥ŸÜŸàŸä</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <Button \n                    type=\"submit\" \n                    className=\"w-full gradient-purple hover:scale-105 transition-transform\"\n                    disabled={addCustomerMutation.isPending}\n                    data-testid=\"button-submit-customer\"\n                  >\n                    {addCustomerMutation.isPending ? \"ÿ¨ÿßÿ±Ÿä ÿßŸÑÿ≠ŸÅÿ∏...\" : \"ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿπŸÖŸäŸÑ\"}\n                  </Button>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Edit Customer Dialog */}\n        <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n          <DialogContent className=\"sm:max-w-md glass-card border-white/20\">\n            <DialogHeader>\n              <DialogTitle data-testid=\"text-edit-dialog-title\">ÿ™ÿπÿØŸäŸÑ ÿßŸÑÿπŸÖŸäŸÑ</DialogTitle>\n            </DialogHeader>\n            \n            <Form {...editForm}>\n              <form onSubmit={editForm.handleSubmit(onEditSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={editForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>ÿßÿ≥ŸÖ ÿßŸÑÿπŸÖŸäŸÑ</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"ÿ£ÿØÿÆŸÑ ÿßÿ≥ŸÖ ÿßŸÑÿπŸÖŸäŸÑ\" \n                          className=\"glass-card border-white/20 focus:border-purple-400\"\n                          data-testid=\"input-edit-customer-name\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={editForm.control}\n                  name=\"menuUrl\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>ÿ±ÿßÿ®ÿ∑ ÿßŸÑŸÖŸÜŸäŸà</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"https://example.com/menu\" \n                          className=\"glass-card border-white/20 focus:border-purple-400\"\n                          data-testid=\"input-edit-menu-url\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={editForm.control}\n                  name=\"joinDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿßŸÜÿ∂ŸÖÿßŸÖ</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"date\" \n                          className=\"glass-card border-white/20 focus:border-purple-400\"\n                          data-testid=\"input-edit-join-date\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={editForm.control}\n                  name=\"subscriptionType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>ŸÜŸàÿπ ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger className=\"glass-card border-white/20\" data-testid=\"select-edit-subscription-type\">\n                            <SelectValue placeholder=\"ÿßÿÆÿ™ÿ± ŸÜŸàÿπ ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"annual\">ÿ≥ŸÜŸàŸä</SelectItem>\n                          <SelectItem value=\"semi-annual\">ŸÜÿµŸÅ ÿ≥ŸÜŸàŸä</SelectItem>\n                          <SelectItem value=\"quarterly\">ÿ±ÿ®ÿπ ÿ≥ŸÜŸàŸä</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <Button \n                  type=\"submit\" \n                  className=\"w-full gradient-purple hover:scale-105 transition-transform\"\n                  disabled={updateCustomerMutation.isPending}\n                  data-testid=\"button-submit-edit-customer\"\n                >\n                  {updateCustomerMutation.isPending ? \"ÿ¨ÿßÿ±Ÿä ÿßŸÑÿ≠ŸÅÿ∏...\" : \"ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿπŸÖŸäŸÑ\"}\n                </Button>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Customer List */}\n        <GlassCard className=\"p-6\">\n          <h2 className=\"text-xl font-semibold mb-6\" data-testid=\"text-customer-list-title\">ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿπŸÖŸÑÿßÿ°</h2>\n          \n          {isLoading ? (\n            <div className=\"text-center py-12\">\n              <div className=\"animate-spin w-8 h-8 border-4 border-purple-500 border-t-transparent rounded-full mx-auto mb-4\"></div>\n              <p className=\"text-gray-400\">ÿ¨ÿßÿ±Ÿä ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿπŸÖŸÑÿßÿ°...</p>\n            </div>\n          ) : Array.isArray(customers) && customers.length ? (\n            <div className=\"grid gap-4\">\n              {customers.map((customer: any, index: number) => (\n                <GlassCard \n                  key={customer.id} \n                  className=\"p-6\"\n                  data-testid={`card-customer-${index}`}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4 space-x-reverse\">\n                      <div className={`w-12 h-12 gradient-purple rounded-full flex items-center justify-center`}>\n                        <Calendar className=\"w-6 h-6\" />\n                      </div>\n                      <div>\n                        <h3 className=\"text-lg font-semibold flex items-center space-x-2 space-x-reverse\">\n                          <span data-testid={`text-customer-name-${index}`}>{customer.name}</span>\n                          {isExpired(customer.expiryDate) && (\n                            <AlertTriangle className=\"w-4 h-4 text-red-400\" />\n                          )}\n                          {isExpiringSoon(customer.expiryDate) && (\n                            <AlertTriangle className=\"w-4 h-4 text-yellow-400\" />\n                          )}\n                        </h3>\n                        <p className=\"text-sm text-gray-400\" data-testid={`text-customer-join-date-${index}`}>\n                          ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿßŸÜÿ∂ŸÖÿßŸÖ: {new Date(customer.joinDate).toLocaleDateString('ar-IQ')}\n                        </p>\n                        <p \n                          className={`text-sm ${isExpired(customer.expiryDate) ? 'text-red-400' : isExpiringSoon(customer.expiryDate) ? 'text-yellow-400' : 'text-gray-300'}`}\n                          data-testid={`text-customer-expiry-date-${index}`}\n                        >\n                          ŸäŸÜÿ™ŸáŸä ŸÅŸä: {new Date(customer.expiryDate).toLocaleDateString('ar-IQ')}\n                        </p>\n                        <p className=\"text-xs text-gray-500\" data-testid={`text-customer-subscription-type-${index}`}>\n                          ŸÜŸàÿπ ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ: {customer.subscriptionType === 'annual' ? 'ÿ≥ŸÜŸàŸä' : customer.subscriptionType === 'semi-annual' ? 'ŸÜÿµŸÅ ÿ≥ŸÜŸàŸä' : 'ÿ±ÿ®ÿπ ÿ≥ŸÜŸàŸä'}\n                        </p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex space-x-3 space-x-reverse\">\n                      <Button\n                        onClick={() => handleEditCustomer(customer)}\n                        variant=\"outline\"\n                        className=\"border-blue-400 text-blue-400 hover:bg-blue-400/10\"\n                        data-testid={`button-edit-${index}`}\n                      >\n                        <Edit className=\"w-4 h-4 ml-1\" />\n                        ÿ™ÿπÿØŸäŸÑ\n                      </Button>\n\n                      <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                          <Button\n                            variant=\"outline\"\n                            className=\"border-red-400 text-red-400 hover:bg-red-400/10\"\n                            data-testid={`button-delete-${index}`}\n                          >\n                            <Trash2 className=\"w-4 h-4 ml-1\" />\n                            ÿ≠ÿ∞ŸÅ\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent className=\"glass-card border-white/20\">\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>ÿ™ÿ£ŸÉŸäÿØ ÿßŸÑÿ≠ÿ∞ŸÅ</AlertDialogTitle>\n                            <AlertDialogDescription>\n                              ŸáŸÑ ÿ£ŸÜÿ™ ŸÖÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ£ŸÜŸÉ ÿ™ÿ±ŸäÿØ ÿ≠ÿ∞ŸÅ ÿßŸÑÿπŸÖŸäŸÑ \"{customer.name}\"ÿü Ÿáÿ∞ÿß ÿßŸÑÿ•ÿ¨ÿ±ÿßÿ° ŸÑÿß ŸäŸÖŸÉŸÜ ÿßŸÑÿ™ÿ±ÿßÿ¨ÿπ ÿπŸÜŸá.\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter className=\"flex-row-reverse\">\n                            <AlertDialogAction \n                              onClick={() => handleDeleteCustomer(customer.id)}\n                              className=\"bg-red-600 hover:bg-red-700\"\n                            >\n                              ÿ™ÿ£ŸÉŸäÿØ ÿßŸÑÿ≠ÿ∞ŸÅ\n                            </AlertDialogAction>\n                            <AlertDialogCancel>ÿ•ŸÑÿ∫ÿßÿ°</AlertDialogCancel>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                      \n                      <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                          <Button\n                            disabled={renewSubscriptionMutation.isPending}\n                            className=\"gradient-green hover:scale-105 transition-transform\"\n                            data-testid={`button-renew-${index}`}\n                          >\n                            <RotateCcw className=\"w-4 h-4 ml-1\" />\n                            ÿ™ÿ¨ÿØŸäÿØ\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent className=\"glass-card border-white/20\">\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>ÿ™ÿ£ŸÉŸäÿØ ÿßŸÑÿ™ÿ¨ÿØŸäÿØ</AlertDialogTitle>\n                            <AlertDialogDescription>\n                              ŸáŸÑ ÿ£ŸÜÿ™ ŸÖÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ£ŸÜŸÉ ÿ™ÿ±ŸäÿØ ÿ™ÿ¨ÿØŸäÿØ ÿßÿ¥ÿ™ÿ±ÿßŸÉ ÿßŸÑÿπŸÖŸäŸÑ \"{customer.name}\" ŸÑÿ≥ŸÜÿ© ÿ•ÿ∂ÿßŸÅŸäÿ©ÿü\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter className=\"flex-row-reverse\">\n                            <AlertDialogAction \n                              onClick={() => handleRenewSubscription(customer.id)}\n                              className=\"gradient-green\"\n                            >\n                              ÿ™ÿ£ŸÉŸäÿØ ÿßŸÑÿ™ÿ¨ÿØŸäÿØ\n                            </AlertDialogAction>\n                            <AlertDialogCancel>ÿ•ŸÑÿ∫ÿßÿ°</AlertDialogCancel>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                      \n                      {customer.menuUrl && (\n                        <Button\n                          asChild\n                          variant=\"outline\"\n                          className=\"border-blue-400 text-blue-400 hover:bg-blue-400/10\"\n                          data-testid={`button-view-menu-${index}`}\n                        >\n                          <a \n                            href={customer.menuUrl} \n                            target=\"_blank\" \n                            rel=\"noopener noreferrer\"\n                          >\n                            <ExternalLink className=\"w-4 h-4 ml-1\" />\n                            ÿßŸÑŸÖŸÜŸäŸà\n                          </a>\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </GlassCard>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12 text-gray-400\">\n              <Calendar className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n              <p data-testid=\"text-no-customers\">ŸÑÿß ŸäŸàÿ¨ÿØ ÿπŸÖŸÑÿßÿ° ŸÖÿ≥ÿ¨ŸÑŸäŸÜ ÿ®ÿπÿØ</p>\n              <p className=\"text-sm mt-2\">ÿßÿ®ÿØÿ£ ÿ®ÿ•ÿ∂ÿßŸÅÿ© ÿ£ŸàŸÑ ÿπŸÖŸäŸÑ ŸÑŸÉ</p>\n            </div>\n          )}\n        </GlassCard>\n      </main>\n    </div>\n  );\n}\n","size_bytes":26159},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { \n  Users, \n  DollarSign, \n  Receipt, \n  Printer, \n  Bus, \n  BarChart3,\n  ExternalLink,\n  UserPlus,\n  Handshake,\n  Plus,\n  TrendingUp,\n  AlertTriangle,\n  Warehouse,\n  Eye,\n  EyeOff\n} from \"lucide-react\";\nimport { Header } from \"@/components/layout/header\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const [hideNumbers, setHideNumbers] = useState(false);\n\n  const { data: stats, isLoading: statsLoading, error: statsError } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"]\n  });\n\n  if (statsError && isUnauthorizedError(statsError as Error)) {\n    toast({\n      title: \"ÿ∫Ÿäÿ± ŸÖÿµÿ±ÿ≠\",\n      description: \"ÿ¨ÿßÿ±Ÿä ÿ•ÿπÿßÿØÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ...\",\n      variant: \"destructive\",\n    });\n    setTimeout(() => {\n      window.location.href = \"/api/login\";\n    }, 500);\n  }\n\n  const { data: activities, isLoading: activitiesLoading, error: activitiesError } = useQuery({\n    queryKey: [\"/api/activities\"]\n  });\n\n  if (activitiesError && isUnauthorizedError(activitiesError as Error)) {\n    toast({\n      title: \"ÿ∫Ÿäÿ± ŸÖÿµÿ±ÿ≠\",\n      description: \"ÿ¨ÿßÿ±Ÿä ÿ•ÿπÿßÿØÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ...\",\n      variant: \"destructive\",\n    });\n    setTimeout(() => {\n      window.location.href = \"/api/login\";\n    }, 500);\n  }\n\n  const formatValue = (value: string | number) => {\n    if (hideNumbers) {\n      return \"****\";\n    }\n    return value;\n  };\n\n  const modules = [\n    {\n      title: \"ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿπŸÖŸÑÿßÿ°\",\n      description: \"ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿπŸÖŸÑÿßÿ° Ÿàÿ™ÿ™ÿ®ÿπ ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉÿßÿ™ ŸàÿßŸÑÿ™ÿ¨ÿØŸäÿØÿßÿ™ ÿßŸÑÿ™ŸÑŸÇÿßÿ¶Ÿäÿ©\",\n      icon: Users,\n      gradient: \"purple\",\n      link: \"/customers\",\n      stats: [`${stats?.totalCustomers || 0} ÿπŸÖŸäŸÑ`, `${stats?.expiredSubscriptions || 0} ŸÖŸÜÿ™ŸáŸä`],\n    },\n    {\n      title: \"ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ•ÿØÿÆÿßŸÑÿßÿ™\",\n      description: \"ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿ≠ŸàÿßŸÑÿßÿ™ ŸàÿßŸÑŸÖÿ∑ÿ®Ÿàÿπÿßÿ™ Ÿàÿ±ŸÅÿπ ÿßŸÑŸÅŸäŸàÿ¥ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸäÿ©\",\n      icon: DollarSign,\n      gradient: \"green\",\n      link: \"/income\",\n      stats: [`${stats?.monthlyIncome || 0} ÿØ.ÿπ`, \"Ÿáÿ∞ÿß ÿßŸÑÿ¥Ÿáÿ±\"],\n    },\n    {\n      title: \"ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ•ÿÆÿ±ÿßÿ¨ÿßÿ™\",\n      description: \"ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑŸÖÿµÿßÿ±ŸäŸÅ ŸàÿßŸÑŸÜŸÅŸÇÿßÿ™ ŸÖÿπ ÿßŸÑÿ£ÿ≥ÿ®ÿßÿ® ÿßŸÑÿ™ŸÅÿµŸäŸÑŸäÿ©\",\n      icon: Receipt,\n      gradient: \"red\",\n      link: \"/expenses\",\n      stats: [`${stats?.totalExpenses || 0} ÿØ.ÿπ`, \"ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑŸÖÿµÿßÿ±ŸäŸÅ\"],\n    },\n    {\n      title: \"ŸÇÿ≥ŸÖ ÿßŸÑŸÖÿ∑ÿ®Ÿàÿπÿßÿ™\",\n      description: \"ÿπÿ±ÿ∂ ÿ¨ŸÖŸäÿπ ÿßŸÑŸÖÿ∑ÿ®Ÿàÿπÿßÿ™ ŸàÿßŸÑÿ•Ÿäÿ±ÿßÿØÿßÿ™ ÿßŸÑŸÖÿ≠ŸÇŸÇÿ© ŸÖŸÜŸáÿß\",\n      icon: Printer,\n      gradient: \"orange\",\n      link: \"/prints\",\n      stats: [`${stats?.printRevenue || 0} ÿØ.ÿπ`, \"ÿ•Ÿäÿ±ÿßÿØÿßÿ™ ÿßŸÑŸÖÿ∑ÿ®Ÿàÿπÿßÿ™\"],\n    },\n    {\n      title: \"ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ\",\n      description: \"ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ ŸàÿßŸÑÿ±Ÿàÿßÿ™ÿ® ŸàŸÖŸÇÿßÿ±ŸÜÿ© ÿßŸÑŸÖÿÆÿ≤ŸàŸÜ\",\n      icon: Bus,\n      gradient: \"cyan\",\n      link: \"/employees\",\n      stats: [`${stats?.totalEmployees || 0} ŸÖŸàÿ∏ŸÅ`, stats?.financialStatus === 'healthy' ? \"ÿßŸÑŸàÿ∂ÿπ ÿµÿ≠Ÿä\" : stats?.financialStatus === 'warning' ? \"ÿ™ÿ≠ÿ∞Ÿäÿ±\" : \"Ÿàÿ∂ÿπ ÿÆÿ∑ÿ±\"],\n    },\n    {\n      title: \"ÿßŸÑÿ™ŸÇÿßÿ±Ÿäÿ±\",\n      description: \"ÿ•ŸÜÿ¥ÿßÿ° Ÿàÿ™ÿµÿØŸäÿ± ÿßŸÑÿ™ŸÇÿßÿ±Ÿäÿ± ÿ®ÿµŸäÿ∫ÿ© PDF ÿßÿ≠ÿ™ÿ±ÿßŸÅŸäÿ©\",\n      icon: BarChart3,\n      gradient: \"indigo\",\n      link: \"/reports\",\n      stats: [\"ÿ™ŸÇÿßÿ±Ÿäÿ± ÿ¥ÿßŸÖŸÑÿ©\", \"ÿ¨ÿßŸáÿ≤ÿ© ŸÑŸÑÿ™ÿµÿØŸäÿ±\"],\n    },\n    {\n      title: \"ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖŸÜŸäŸàŸáÿßÿ™\",\n      description: \"ÿ±ÿßÿ®ÿ∑ ŸÖÿ®ÿßÿ¥ÿ± ŸÑŸàÿßÿ¨Ÿáÿ© ÿßŸÑÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿÆÿßÿ±ÿ¨Ÿäÿ©\",\n      icon: ExternalLink,\n      gradient: \"pink\",\n      link: \"https://backoffice.dijital.menu/iqr\",\n      external: true,\n      stats: [\"ÿ•ÿØÿßÿ±ÿ© ÿÆÿßÿ±ÿ¨Ÿäÿ©\", \"dijital.menu\"],\n    },\n    {\n      title: \"ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ≠ÿ≥ÿßÿ®ÿßÿ™\",\n      description: \"ÿ•ŸÜÿ¥ÿßÿ° ÿ≠ÿ≥ÿßÿ®ÿßÿ™ ŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ÿ®ÿµŸÑÿßÿ≠Ÿäÿßÿ™ ŸÖÿ≠ÿØÿØÿ©\",\n      icon: UserPlus,\n      gradient: \"purple\",\n      link: \"/user-management\",\n      stats: [\"ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ\", \"ÿµŸÑÿßÿ≠Ÿäÿßÿ™ ŸÖÿ™ŸÇÿØŸÖÿ©\"],\n    },\n    {\n      title: \"ÿßŸÑŸÖÿ≥ÿ™ÿ´ŸÖÿ±ŸäŸÜ\",\n      description: \"ŸÖÿÆÿµÿµ ŸÑŸÑÿ™ÿ∑ŸàŸäÿ± ÿßŸÑŸÖÿ≥ÿ™ŸÇÿ®ŸÑŸä\",\n      icon: Handshake,\n      gradient: \"gray\",\n      disabled: true,\n      stats: [\"ŸÇÿ±Ÿäÿ®ÿßŸã\"],\n    },\n  ];\n\n  const quickStats = [\n    {\n      title: \"ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑÿπŸÖŸÑÿßÿ°\",\n      value: stats?.totalCustomers || 0,\n      icon: Users,\n      gradient: \"green\",\n    },\n    {\n      title: \"ÿßŸÑÿØÿÆŸÑ ÿßŸÑÿ¥Ÿáÿ±Ÿä\",\n      value: `${stats?.monthlyIncome || 0} ÿØ.ÿπ`,\n      icon: TrendingUp,\n      gradient: \"blue\",\n    },\n    {\n      title: \"ÿßÿ¥ÿ™ÿ±ÿßŸÉÿßÿ™ ŸÖŸÜÿ™ŸáŸäÿ©\",\n      value: stats?.expiredSubscriptions || 0,\n      icon: AlertTriangle,\n      gradient: \"red\",\n      warning: (stats?.expiredSubscriptions || 0) > 0,\n    },\n    {\n      title: \"ÿßŸÑŸÖÿÆÿ≤ŸàŸÜ ÿßŸÑÿ≠ÿßŸÑŸä\",\n      value: `${stats?.currentInventory || 0} ÿØ.ÿπ`,\n      icon: Warehouse,\n      gradient: \"purple\",\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen gradient-bg\">\n      <Header />\n      \n      <main className=\"max-w-7xl mx-auto px-6 py-8\">\n        {/* Dashboard Header */}\n        <div className=\"mb-8 flex justify-between items-center\">\n          <div>\n            <h2 className=\"text-3xl font-bold mb-2\" data-testid=\"text-dashboard-title\">ŸÑŸàÿ≠ÿ© ÿßŸÑÿ™ÿ≠ŸÉŸÖ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©</h2>\n            <p className=\"text-gray-300\" data-testid=\"text-dashboard-subtitle\">ÿ•ÿØÿßÿ±ÿ© ÿ¥ÿßŸÖŸÑÿ© ŸÑÿ¨ŸÖŸäÿπ ÿπŸÖŸÑŸäÿßÿ™ ÿßŸÑÿ¥ÿ±ŸÉÿ©</p>\n          </div>\n          <button\n            onClick={() => setHideNumbers(!hideNumbers)}\n            className=\"flex items-center space-x-2 space-x-reverse px-4 py-2 rounded-xl bg-white/10 hover:bg-white/20 transition-colors\"\n            data-testid=\"button-toggle-visibility\"\n          >\n            {hideNumbers ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n            <span className=\"text-sm\">{hideNumbers ? \"ÿ•ÿ∏Ÿáÿßÿ± ÿßŸÑÿ£ÿ±ŸÇÿßŸÖ\" : \"ÿ•ÿÆŸÅÿßÿ° ÿßŸÑÿ£ÿ±ŸÇÿßŸÖ\"}</span>\n          </button>\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          {quickStats.map((stat, index) => (\n            <GlassCard \n              key={index}\n              className=\"p-6 hover:scale-105 transition-transform duration-300\"\n              data-testid={`card-stat-${index}`}\n            >\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-gray-300 text-sm\" data-testid={`text-stat-title-${index}`}>{stat.title}</p>\n                  <p \n                    className={`text-2xl font-bold ${stat.warning ? 'text-red-400' : ''}`}\n                    data-testid={`text-stat-value-${index}`}\n                  >\n                    {statsLoading ? \"...\" : formatValue(stat.value)}\n                  </p>\n                </div>\n                <div className={`w-12 h-12 gradient-${stat.gradient} rounded-full flex items-center justify-center`}>\n                  <stat.icon className=\"w-6 h-6\" />\n                </div>\n              </div>\n            </GlassCard>\n          ))}\n        </div>\n\n        {/* Main Modules Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12\">\n          {modules.map((module, index) => (\n            <ModuleCard\n              key={index}\n              module={module}\n              index={index}\n              hideNumbers={hideNumbers}\n            />\n          ))}\n        </div>\n\n        {/* Recent Activities */}\n        <div>\n          <h3 className=\"text-2xl font-bold mb-6\" data-testid=\"text-recent-activities\">ÿßŸÑŸÜÿ¥ÿßÿ∑ÿßÿ™ ÿßŸÑÿ£ÿÆŸäÿ±ÿ©</h3>\n          <GlassCard className=\"p-6\">\n            <div className=\"space-y-4\">\n              {activitiesLoading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"animate-spin w-8 h-8 border-4 border-purple-500 border-t-transparent rounded-full mx-auto\"></div>\n                  <p className=\"mt-2 text-gray-400\">ÿ¨ÿßÿ±Ÿä ÿßŸÑÿ™ÿ≠ŸÖŸäŸÑ...</p>\n                </div>\n              ) : activities?.length ? (\n                activities.map((activity: any, index: number) => (\n                  <div \n                    key={activity.id} \n                    className=\"flex items-center justify-between p-4 bg-white/5 rounded-xl\"\n                    data-testid={`activity-${index}`}\n                  >\n                    <div className=\"flex items-center space-x-4 space-x-reverse\">\n                      <div className={`w-10 h-10 gradient-${getActivityGradient(activity.type)} rounded-full flex items-center justify-center`}>\n                        <Plus className=\"w-5 h-5\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium\" data-testid={`text-activity-description-${index}`}>{activity.description}</p>\n                        <p className=\"text-sm text-gray-400\" data-testid={`text-activity-time-${index}`}>\n                          {new Date(activity.createdAt).toLocaleString('ar-IQ')}\n                        </p>\n                      </div>\n                    </div>\n                    <span className={`text-sm ${getActivityStatusColor(activity.type)}`}>\n                      {getActivityStatus(activity.type)}\n                    </span>\n                  </div>\n                ))\n              ) : (\n                <div className=\"text-center py-8 text-gray-400\">\n                  <p data-testid=\"text-no-activities\">ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ£ŸÜÿ¥ÿ∑ÿ© ÿ≠ÿØŸäÿ´ÿ©</p>\n                </div>\n              )}\n            </div>\n          </GlassCard>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nfunction ModuleCard({ module, index, hideNumbers }: { module: any; index: number; hideNumbers: boolean }) {\n  const content = (\n    <GlassCard\n      className={`p-8 ${module.disabled ? 'opacity-60' : 'hover:scale-105 cursor-pointer'} transition-all duration-500 hover:shadow-2xl animate-float group`}\n      glow={!module.disabled}\n      data-testid={`card-module-${index}`}\n    >\n      <div className=\"flex flex-col items-center text-center space-y-6\">\n        <div className={`w-20 h-20 ${module.disabled ? 'bg-gray-600' : `gradient-${module.gradient}`} rounded-full flex items-center justify-center ${!module.disabled ? 'group-hover:animate-glow' : ''}`}>\n          <module.icon className=\"w-8 h-8 text-white\" />\n        </div>\n        <div>\n          <h3 className=\"text-2xl font-bold mb-2\" data-testid={`text-module-title-${index}`}>{module.title}</h3>\n          <p className=\"text-gray-300 text-sm leading-relaxed\" data-testid={`text-module-description-${index}`}>\n            {module.description}\n          </p>\n        </div>\n        {module.stats && (\n          <div className=\"flex space-x-2 space-x-reverse\">\n            {module.stats.map((stat: string, statIndex: number) => (\n              <span \n                key={statIndex}\n                className={`px-3 py-1 ${module.disabled ? 'bg-yellow-500/20' : 'bg-white/20'} rounded-full text-xs`}\n                data-testid={`text-module-stat-${index}-${statIndex}`}\n              >\n                {/* ÿ•ÿÆŸÅÿßÿ° ÿßŸÑÿ£ÿ±ŸÇÿßŸÖ ŸÅŸä ÿßŸÑÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™ ÿ•ÿ∞ÿß ŸÉÿßŸÜÿ™ ÿ™ÿ≠ÿ™ŸàŸä ÿπŸÑŸâ ÿ£ÿ±ŸÇÿßŸÖ */}\n                {stat.match(/\\d/) && hideNumbers ? stat.replace(/\\d+/g, \"****\") : stat}\n              </span>\n            ))}\n          </div>\n        )}\n      </div>\n    </GlassCard>\n  );\n\n  if (module.disabled) {\n    return content;\n  }\n\n  if (module.external) {\n    return (\n      <a\n        href={module.link}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {content}\n      </a>\n    );\n  }\n\n  return (\n    <Link href={module.link}>\n      {content}\n    </Link>\n  );\n}\n\nfunction getActivityGradient(type: string): string {\n  switch (type) {\n    case 'customer_added': return 'green';\n    case 'income_added': return 'blue';\n    case 'expense_added': return 'red';\n    case 'employee_added': return 'cyan';\n    case 'subscription_renewed': return 'purple';\n    default: return 'gray';\n  }\n}\n\nfunction getActivityStatusColor(type: string): string {\n  switch (type) {\n    case 'customer_added': return 'text-green-400';\n    case 'income_added': return 'text-blue-400';\n    case 'expense_added': return 'text-red-400';\n    case 'employee_added': return 'text-cyan-400';\n    case 'subscription_renewed': return 'text-purple-400';\n    default: return 'text-gray-400';\n  }\n}\n\nfunction getActivityStatus(type: string): string {\n  switch (type) {\n    case 'customer_added': return 'ŸÖŸÉÿ™ŸÖŸÑ';\n    case 'income_added': return 'ŸÖÿ§ŸÉÿØ';\n    case 'expense_added': return 'ŸÖÿ≥ÿ¨ŸÑ';\n    case 'employee_added': return 'ŸÖÿ∂ÿßŸÅ';\n    case 'subscription_renewed': return 'ŸÖÿ¨ÿØÿØ';\n    default: return 'ŸÖŸÜÿ¨ÿ≤';\n  }\n}\n","size_bytes":13063},"client/src/pages/employees.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Link } from \"wouter\";\nimport { ArrowRight, Plus, Bus, Trash2, DollarSign, Warehouse, AlertTriangle } from \"lucide-react\";\nimport { Header } from \"@/components/layout/header\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { insertEmployeeSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function Employees() {\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm({\n    resolver: zodResolver(insertEmployeeSchema),\n    defaultValues: {\n      name: \"\",\n      position: \"\",\n      salary: \"\",\n    },\n  });\n\n  const { data: employees, isLoading, error: employeesError } = useQuery({\n    queryKey: [\"/api/employees\"]\n  });\n\n  if (employeesError && isUnauthorizedError(employeesError as Error)) {\n    toast({\n      title: \"ÿ∫Ÿäÿ± ŸÖÿµÿ±ÿ≠\",\n      description: \"ÿ¨ÿßÿ±Ÿä ÿ•ÿπÿßÿØÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ...\",\n      variant: \"destructive\",\n    });\n    setTimeout(() => {\n      window.location.href = \"/api/login\";\n    }, 500);\n  }\n\n  const { data: stats, error: statsError } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"]\n  });\n\n  if (statsError && isUnauthorizedError(statsError as Error)) {\n    toast({\n      title: \"ÿ∫Ÿäÿ± ŸÖÿµÿ±ÿ≠\",\n      description: \"ÿ¨ÿßÿ±Ÿä ÿ•ÿπÿßÿØÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ...\",\n      variant: \"destructive\",\n    });\n    setTimeout(() => {\n      window.location.href = \"/api/login\";\n    }, 500);\n  }\n\n  const addEmployeeMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/employees\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/employees\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      setIsAddDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"ÿ™ŸÖ ÿ®ŸÜÿ¨ÿßÿ≠\",\n        description: \"ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖŸàÿ∏ŸÅ ÿ®ŸÜÿ¨ÿßÿ≠\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"ÿ∫Ÿäÿ± ŸÖÿµÿ±ÿ≠\",\n          description: \"ÿ¨ÿßÿ±Ÿä ÿ•ÿπÿßÿØÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"ÿÆÿ∑ÿ£\",\n        description: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖŸàÿ∏ŸÅ\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteEmployeeMutation = useMutation({\n    mutationFn: async (employeeId: string) => {\n      return await apiRequest(\"DELETE\", `/api/employees/${employeeId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/employees\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"ÿ™ŸÖ ÿßŸÑÿ≠ÿ∞ŸÅ\",\n        description: \"ÿ™ŸÖ ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖŸàÿ∏ŸÅ ÿ®ŸÜÿ¨ÿßÿ≠\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"ÿ∫Ÿäÿ± ŸÖÿµÿ±ÿ≠\",\n          description: \"ÿ¨ÿßÿ±Ÿä ÿ•ÿπÿßÿØÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"ÿÆÿ∑ÿ£\",\n        description: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖŸàÿ∏ŸÅ\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    addEmployeeMutation.mutate(data);\n  };\n\n  const handleDeleteEmployee = (employeeId: string) => {\n    if (confirm(\"ŸáŸÑ ÿ£ŸÜÿ™ ŸÖÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ≠ÿ∞ŸÅ Ÿáÿ∞ÿß ÿßŸÑŸÖŸàÿ∏ŸÅÿü\")) {\n      deleteEmployeeMutation.mutate(employeeId);\n    }\n  };\n\n  const getFinancialStatusColor = (status: string) => {\n    switch (status) {\n      case 'healthy': return 'text-green-400';\n      case 'warning': return 'text-yellow-400';\n      case 'critical': return 'text-red-400';\n      default: return 'text-gray-400';\n    }\n  };\n\n  const getFinancialStatusText = (status: string) => {\n    switch (status) {\n      case 'healthy': return 'ÿµÿ≠Ÿä';\n      case 'warning': return 'ÿ™ÿ≠ÿ∞Ÿäÿ±';\n      case 'critical': return 'ÿÆÿ∑ÿ±';\n      default: return 'ÿ∫Ÿäÿ± ŸÖÿ≠ÿØÿØ';\n    }\n  };\n\n  const getFinancialStatusGradient = (status: string) => {\n    switch (status) {\n      case 'healthy': return 'gradient-green';\n      case 'warning': return 'gradient-orange';\n      case 'critical': return 'gradient-red';\n      default: return 'gradient-gray';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen gradient-bg\">\n      <Header />\n      \n      <main className=\"max-w-7xl mx-auto px-6 py-8\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center space-x-4 space-x-reverse\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back\">\n                <ArrowRight className=\"w-4 h-4 ml-2\" />\n                ÿßŸÑÿπŸàÿØÿ© ŸÑŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©\n              </Button>\n            </Link>\n            <div>\n              <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ</h1>\n              <p className=\"text-gray-300\" data-testid=\"text-page-subtitle\">ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ ŸàÿßŸÑÿ±Ÿàÿßÿ™ÿ® ŸàŸÖŸÇÿßÿ±ŸÜÿ© ÿßŸÑŸÖÿÆÿ≤ŸàŸÜ</p>\n            </div>\n          </div>\n          \n          <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gradient-cyan hover:scale-105 transition-transform\" data-testid=\"button-add-employee\">\n                <Plus className=\"w-4 h-4 ml-2\" />\n                ÿ•ÿ∂ÿßŸÅÿ© ŸÖŸàÿ∏ŸÅ\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-md glass-card border-white/20\">\n              <DialogHeader>\n                <DialogTitle data-testid=\"text-dialog-title\">ÿ•ÿ∂ÿßŸÅÿ© ŸÖŸàÿ∏ŸÅ ÿ¨ÿØŸäÿØ</DialogTitle>\n              </DialogHeader>\n              \n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>ÿßÿ≥ŸÖ ÿßŸÑŸÖŸàÿ∏ŸÅ</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"ÿ£ÿØÿÆŸÑ ÿßÿ≥ŸÖ ÿßŸÑŸÖŸàÿ∏ŸÅ\" \n                            className=\"glass-card border-white/20 focus:border-cyan-400\"\n                            data-testid=\"input-employee-name\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"position\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>ÿßŸÑŸÖŸÜÿµÿ® (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"ŸÖÿ´ÿßŸÑ: ŸÖÿ∑Ÿàÿ±ÿå ŸÖÿ≠ÿßÿ≥ÿ®ÿå ŸÖÿØŸäÿ±...\" \n                            className=\"glass-card border-white/20 focus:border-cyan-400\"\n                            data-testid=\"input-employee-position\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"salary\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>ÿßŸÑÿ±ÿßÿ™ÿ® (ÿØŸäŸÜÿßÿ± ÿπÿ±ÿßŸÇŸä)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\"\n                            placeholder=\"0\" \n                            className=\"glass-card border-white/20 focus:border-cyan-400\"\n                            data-testid=\"input-employee-salary\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <Button \n                    type=\"submit\" \n                    className=\"w-full gradient-cyan hover:scale-105 transition-transform\"\n                    disabled={addEmployeeMutation.isPending}\n                    data-testid=\"button-submit-employee\"\n                  >\n                    {addEmployeeMutation.isPending ? \"ÿ¨ÿßÿ±Ÿä ÿßŸÑÿ≠ŸÅÿ∏...\" : \"ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖŸàÿ∏ŸÅ\"}\n                  </Button>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Financial Status Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          <GlassCard className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-300 text-sm\" data-testid=\"text-current-inventory\">ÿßŸÑŸÖÿÆÿ≤ŸàŸÜ ÿßŸÑÿ≠ÿßŸÑŸä</p>\n                <p className=\"text-2xl font-bold text-green-400\" data-testid=\"text-inventory-amount\">\n                  {stats ? `${stats.currentInventory} ÿØ.ÿπ` : \"...\"}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 gradient-green rounded-full flex items-center justify-center\">\n                <Warehouse className=\"w-6 h-6\" />\n              </div>\n            </div>\n          </GlassCard>\n\n          <GlassCard className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-300 text-sm\" data-testid=\"text-total-salaries\">ŸÖÿ¨ŸÖŸàÿπ ÿßŸÑÿ±Ÿàÿßÿ™ÿ®</p>\n                <p className=\"text-2xl font-bold\" data-testid=\"text-salaries-amount\">\n                  {stats ? `${stats.totalSalaries} ÿØ.ÿπ` : \"...\"}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 gradient-blue rounded-full flex items-center justify-center\">\n                <DollarSign className=\"w-6 h-6\" />\n              </div>\n            </div>\n          </GlassCard>\n\n          <GlassCard className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-300 text-sm\" data-testid=\"text-financial-status\">ÿßŸÑÿ≠ÿßŸÑÿ© ÿßŸÑŸÖÿßŸÑŸäÿ©</p>\n                <div className=\"flex items-center space-x-2 space-x-reverse\">\n                  <div className={`w-4 h-4 rounded-full ${stats?.financialStatus === 'healthy' ? 'bg-green-500' : stats?.financialStatus === 'warning' ? 'bg-yellow-500' : 'bg-red-500'}`}></div>\n                  <p \n                    className={`text-lg font-bold ${getFinancialStatusColor(stats?.financialStatus || 'healthy')}`}\n                    data-testid=\"text-status-indicator\"\n                  >\n                    {stats ? getFinancialStatusText(stats.financialStatus) : \"...\"}\n                  </p>\n                </div>\n              </div>\n              <div className={`w-12 h-12 ${getFinancialStatusGradient(stats?.financialStatus || 'healthy')} rounded-full flex items-center justify-center`}>\n                <AlertTriangle className=\"w-6 h-6\" />\n              </div>\n            </div>\n          </GlassCard>\n        </div>\n\n        {/* Employee List */}\n        <GlassCard className=\"p-6\">\n          <h2 className=\"text-xl font-semibold mb-6\" data-testid=\"text-employee-list-title\">ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ</h2>\n          \n          {isLoading ? (\n            <div className=\"text-center py-12\">\n              <div className=\"animate-spin w-8 h-8 border-4 border-cyan-500 border-t-transparent rounded-full mx-auto mb-4\"></div>\n              <p className=\"text-gray-400\">ÿ¨ÿßÿ±Ÿä ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ...</p>\n            </div>\n          ) : employees?.length ? (\n            <div className=\"grid gap-4\">\n              {employees.map((employee: any, index: number) => (\n                <GlassCard \n                  key={employee.id} \n                  className=\"p-6\"\n                  data-testid={`card-employee-${index}`}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4 space-x-reverse\">\n                      <div className=\"w-12 h-12 gradient-cyan rounded-full flex items-center justify-center\">\n                        <Bus className=\"w-6 h-6\" />\n                      </div>\n                      <div>\n                        <h3 className=\"text-lg font-semibold\" data-testid={`text-employee-name-${index}`}>\n                          {employee.name}\n                        </h3>\n                        {employee.position && (\n                          <p className=\"text-sm text-gray-400\" data-testid={`text-employee-position-${index}`}>\n                            {employee.position}\n                          </p>\n                        )}\n                        <p className=\"text-sm text-gray-300\" data-testid={`text-employee-created-${index}`}>\n                          ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿ™ÿπŸäŸäŸÜ: {new Date(employee.createdAt).toLocaleDateString('ar-IQ')}\n                        </p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-4 space-x-reverse\">\n                      <div className=\"text-left\">\n                        <p className=\"text-2xl font-bold text-cyan-400\" data-testid={`text-employee-salary-${index}`}>\n                          {employee.salary} ÿØ.ÿπ\n                        </p>\n                        <p className=\"text-xs text-gray-400\">ÿßŸÑÿ±ÿßÿ™ÿ® ÿßŸÑÿ¥Ÿáÿ±Ÿä</p>\n                      </div>\n                      <Button\n                        onClick={() => handleDeleteEmployee(employee.id)}\n                        disabled={deleteEmployeeMutation.isPending}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"border-red-400 text-red-400 hover:bg-red-400/10\"\n                        data-testid={`button-delete-employee-${index}`}\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </GlassCard>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12 text-gray-400\">\n              <Bus className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n              <p data-testid=\"text-no-employees\">ŸÑÿß ŸäŸàÿ¨ÿØ ŸÖŸàÿ∏ŸÅŸäŸÜ ŸÖÿ≥ÿ¨ŸÑŸäŸÜ ÿ®ÿπÿØ</p>\n              <p className=\"text-sm mt-2\">ÿßÿ®ÿØÿ£ ÿ®ÿ•ÿ∂ÿßŸÅÿ© ÿ£ŸàŸÑ ŸÖŸàÿ∏ŸÅ</p>\n            </div>\n          )}\n        </GlassCard>\n      </main>\n    </div>\n  );\n}\n","size_bytes":15839},"client/src/pages/expenses.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Link } from \"wouter\";\nimport { ArrowRight, Plus, Receipt, Edit2, Trash2 } from \"lucide-react\";\nimport { Header } from \"@/components/layout/header\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { insertExpenseEntrySchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function Expenses() {\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [editingEntry, setEditingEntry] = useState<any>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm({\n    resolver: zodResolver(insertExpenseEntrySchema),\n    defaultValues: {\n      amount: \"\",\n      reason: \"\",\n      description: \"\",\n    },\n  });\n\n  const { data: expenseEntries, isLoading, error: expenseError } = useQuery({\n    queryKey: [\"/api/expenses\"]\n  });\n\n  if (expenseError && isUnauthorizedError(expenseError as Error)) {\n    toast({\n      title: \"ÿ∫Ÿäÿ± ŸÖÿµÿ±ÿ≠\",\n      description: \"ÿ¨ÿßÿ±Ÿä ÿ•ÿπÿßÿØÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ...\",\n      variant: \"destructive\",\n    });\n    setTimeout(() => {\n      window.location.href = \"/api/login\";\n    }, 500);\n  }\n\n  const addExpenseMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/expenses\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/expenses\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/activities\"] });\n      setIsAddDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"ÿ™ŸÖ ÿ®ŸÜÿ¨ÿßÿ≠\",\n        description: \"ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿ•ÿÆÿ±ÿßÿ¨ ÿ®ŸÜÿ¨ÿßÿ≠\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"ÿ∫Ÿäÿ± ŸÖÿµÿ±ÿ≠\",\n          description: \"ÿ¨ÿßÿ±Ÿä ÿ•ÿπÿßÿØÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"ÿÆÿ∑ÿ£\",\n        description: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿ•ÿÆÿ±ÿßÿ¨\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const editExpenseMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return await apiRequest(\"PUT\", `/api/expenses/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/expenses\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/activities\"] });\n      setIsEditDialogOpen(false);\n      setEditingEntry(null);\n      form.reset();\n      toast({\n        title: \"ÿ™ŸÖ ÿ®ŸÜÿ¨ÿßÿ≠\",\n        description: \"ÿ™ŸÖ ÿ™ÿπÿØŸäŸÑ ÿßŸÑÿ•ÿÆÿ±ÿßÿ¨ ÿ®ŸÜÿ¨ÿßÿ≠\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"ÿÆÿ∑ÿ£\",\n        description: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ™ÿπÿØŸäŸÑ ÿßŸÑÿ•ÿÆÿ±ÿßÿ¨\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteExpenseMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/expenses/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/expenses\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/activities\"] });\n      toast({\n        title: \"ÿ™ŸÖ ÿ®ŸÜÿ¨ÿßÿ≠\",\n        description: \"ÿ™ŸÖ ÿ≠ÿ∞ŸÅ ÿßŸÑÿ•ÿÆÿ±ÿßÿ¨ ÿ®ŸÜÿ¨ÿßÿ≠\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"ÿÆÿ∑ÿ£\",\n        description: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ≠ÿ∞ŸÅ ÿßŸÑÿ•ÿÆÿ±ÿßÿ¨\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    if (editingEntry) {\n      editExpenseMutation.mutate({ id: editingEntry.id, data });\n    } else {\n      addExpenseMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (entry: any) => {\n    setEditingEntry(entry);\n    form.reset({\n      reason: entry.reason,\n      amount: entry.amount.toString(),\n      description: entry.description || \"\"\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (window.confirm('ŸáŸÑ ÿ£ŸÜÿ™ ŸÖÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ≠ÿ∞ŸÅ Ÿáÿ∞ÿß ÿßŸÑÿ•ÿÆÿ±ÿßÿ¨ÿü')) {\n      deleteExpenseMutation.mutate(id);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen gradient-bg\">\n      <Header />\n\n      <main className=\"max-w-7xl mx-auto px-6 py-8\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center space-x-4 space-x-reverse\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back\">\n                <ArrowRight className=\"w-4 h-4 ml-2\" />\n                ÿßŸÑÿπŸàÿØÿ© ŸÑŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©\n              </Button>\n            </Link>\n            <div>\n              <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ•ÿÆÿ±ÿßÿ¨ÿßÿ™</h1>\n              <p className=\"text-gray-300\" data-testid=\"text-page-subtitle\">ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑŸÖÿµÿßÿ±ŸäŸÅ ŸàÿßŸÑŸÜŸÅŸÇÿßÿ™</p>\n            </div>\n          </div>\n\n          <Dialog \n            open={isAddDialogOpen || isEditDialogOpen} \n            onOpenChange={(open) => {\n              if (!open) {\n                setIsAddDialogOpen(false);\n                setIsEditDialogOpen(false);\n                setEditingEntry(null);\n                form.reset();\n              }\n            }}\n          >\n            <DialogTrigger asChild>\n              <Button \n                className=\"gradient-red hover:scale-105 transition-transform\" \n                data-testid=\"button-add-expense\"\n                onClick={() => setIsAddDialogOpen(true)}\n              >\n                <Plus className=\"w-4 h-4 ml-2\" />\n                ÿ•ÿ∂ÿßŸÅÿ© ÿ•ÿÆÿ±ÿßÿ¨\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-md glass-card border-white/20\">\n              <DialogHeader>\n                <DialogTitle data-testid=\"text-dialog-title\">\n                  {editingEntry ? 'ÿ™ÿπÿØŸäŸÑ ÿßŸÑÿ•ÿÆÿ±ÿßÿ¨' : 'ÿ•ÿ∂ÿßŸÅÿ© ÿ•ÿÆÿ±ÿßÿ¨ ÿ¨ÿØŸäÿØ'}\n                </DialogTitle>\n              </DialogHeader>\n\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"reason\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>ÿ≥ÿ®ÿ® ÿßŸÑÿ•ÿÆÿ±ÿßÿ¨</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"ŸÖÿ´ÿßŸÑ: ÿ±Ÿàÿßÿ™ÿ® ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜÿå ÿ•Ÿäÿ¨ÿßÿ± ÿßŸÑŸÖŸÉÿ™ÿ®...\" \n                            className=\"glass-card border-white/20 focus:border-red-400\"\n                            data-testid=\"input-expense-reason\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"amount\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>ÿßŸÑŸÖÿ®ŸÑÿ∫ (ÿØŸäŸÜÿßÿ± ÿπÿ±ÿßŸÇŸä)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\"\n                            placeholder=\"0\" \n                            className=\"glass-card border-white/20 focus:border-red-400\"\n                            data-testid=\"input-expense-amount\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>ÿßŸÑÿ™ŸÅÿßÿµŸäŸÑ (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"ÿ™ŸÅÿßÿµŸäŸÑ ÿ•ÿ∂ÿßŸÅŸäÿ© ÿπŸÜ ÿßŸÑÿ•ÿÆÿ±ÿßÿ¨...\" \n                            className=\"glass-card border-white/20 focus:border-red-400 min-h-[100px]\"\n                            data-testid=\"textarea-expense-description\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full gradient-red hover:scale-105 transition-transform\"\n                    disabled={addExpenseMutation.isPending || editExpenseMutation.isPending}\n                    data-testid=\"button-submit-expense\"\n                  >\n                    {(addExpenseMutation.isPending || editExpenseMutation.isPending) \n                      ? \"ÿ¨ÿßÿ±Ÿä ÿßŸÑÿ≠ŸÅÿ∏...\" \n                      : editingEntry \n                        ? \"ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ•ÿÆÿ±ÿßÿ¨\" \n                        : \"ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿ•ÿÆÿ±ÿßÿ¨\"\n                    }\n                  </Button>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Expense Entries List */}\n        <GlassCard className=\"p-6\">\n          <h2 className=\"text-xl font-semibold mb-6\" data-testid=\"text-expense-list-title\">ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ•ÿÆÿ±ÿßÿ¨ÿßÿ™</h2>\n\n          {isLoading ? (\n            <div className=\"text-center py-12\">\n              <div className=\"animate-spin w-8 h-8 border-4 border-red-500 border-t-transparent rounded-full mx-auto mb-4\"></div>\n              <p className=\"text-gray-400\">ÿ¨ÿßÿ±Ÿä ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ•ÿÆÿ±ÿßÿ¨ÿßÿ™...</p>\n            </div>\n          ) : expenseEntries?.length ? (\n            <div className=\"grid gap-4\">\n              {expenseEntries.map((entry: any, index: number) => (\n                <GlassCard \n                  key={entry.id} \n                  className=\"p-6\"\n                  data-testid={`card-expense-${index}`}\n                >\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-start space-x-4 space-x-reverse flex-1\">\n                      <div className=\"w-12 h-12 gradient-red rounded-full flex items-center justify-center mt-1\">\n                        <Receipt className=\"w-6 h-6\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"text-lg font-semibold mb-1\" data-testid={`text-expense-reason-${index}`}>\n                          {entry.reason}\n                        </h3>\n                        <p className=\"text-2xl font-bold text-red-400 mb-2\" data-testid={`text-expense-amount-${index}`}>\n                          {entry.amount} ÿØ.ÿπ\n                        </p>\n                        <p className=\"text-sm text-gray-400 mb-2\" data-testid={`text-expense-date-${index}`}>\n                          {new Date(entry.createdAt).toLocaleDateString('ar-IQ')} - {new Date(entry.createdAt).toLocaleTimeString('ar-IQ')}\n                        </p>\n                        {entry.description && (\n                          <p className=\"text-sm text-gray-300 leading-relaxed\" data-testid={`text-expense-description-${index}`}>\n                            {entry.description}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex flex-col gap-2 ml-4\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"border-yellow-400 text-yellow-400 hover:bg-yellow-400/10\"\n                        onClick={() => handleEdit(entry)}\n                        data-testid={`button-edit-expense-${index}`}\n                      >\n                        <Edit2 className=\"w-4 h-4 ml-1\" />\n                        ÿ™ÿπÿØŸäŸÑ\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"border-red-400 text-red-400 hover:bg-red-400/10\"\n                        onClick={() => handleDelete(entry.id)}\n                        disabled={deleteExpenseMutation.isPending}\n                        data-testid={`button-delete-expense-${index}`}\n                      >\n                        <Trash2 className=\"w-4 h-4 ml-1\" />\n                        ÿ≠ÿ∞ŸÅ\n                      </Button>\n                    </div>\n                  </div>\n                </GlassCard>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12 text-gray-400\">\n              <Receipt className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n              <p data-testid=\"text-no-expenses\">ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ•ÿÆÿ±ÿßÿ¨ÿßÿ™ ŸÖÿ≥ÿ¨ŸÑÿ© ÿ®ÿπÿØ</p>\n              <p className=\"text-sm mt-2\">ÿßÿ®ÿØÿ£ ÿ®ÿ™ÿ≥ÿ¨ŸäŸÑ ÿ£ŸàŸÑ ÿ•ÿÆÿ±ÿßÿ¨</p>\n            </div>\n          )}\n        </GlassCard>\n      </main>\n    </div>\n  );\n}","size_bytes":14217},"client/src/pages/income.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Link } from \"wouter\";\nimport { ArrowRight, Plus, DollarSign, Upload, Edit2, Trash2 } from \"lucide-react\";\nimport { Header } from \"@/components/layout/header\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { FileUpload } from \"@/components/ui/file-upload\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { insertIncomeEntrySchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function Income() {\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [incomeType, setIncomeType] = useState(\"\");\n  const [editingEntry, setEditingEntry] = useState<any>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm({\n    resolver: zodResolver(insertIncomeEntrySchema.extend({\n      customerId: insertIncomeEntrySchema.shape.customerId.optional(),\n    })),\n    defaultValues: {\n      type: \"\",\n      printType: \"\",\n      amount: \"\",\n      customerId: \"\",\n      description: \"\",\n    },\n  });\n\n  const { data: incomeEntries, isLoading, error: incomeError } = useQuery({\n    queryKey: [\"/api/income\"]\n  });\n\n  if (incomeError && isUnauthorizedError(incomeError as Error)) {\n    toast({\n      title: \"ÿ∫Ÿäÿ± ŸÖÿµÿ±ÿ≠\",\n      description: \"ÿ¨ÿßÿ±Ÿä ÿ•ÿπÿßÿØÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ...\",\n      variant: \"destructive\",\n    });\n    setTimeout(() => {\n      window.location.href = \"/api/login\";\n    }, 500);\n  }\n\n  const { data: customers, error: customersFetchError } = useQuery({\n    queryKey: [\"/api/customers\"]\n  });\n\n  if (customersFetchError && isUnauthorizedError(customersFetchError as Error)) {\n    toast({\n      title: \"ÿ∫Ÿäÿ± ŸÖÿµÿ±ÿ≠\",\n      description: \"ÿ¨ÿßÿ±Ÿä ÿ•ÿπÿßÿØÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ...\",\n      variant: \"destructive\",\n    });\n    setTimeout(() => {\n      window.location.href = \"/api/login\";\n    }, 500);\n  }\n\n  const addIncomeMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const formData = new FormData();\n      Object.keys(data).forEach(key => {\n        if (data[key] !== null && data[key] !== undefined && data[key] !== '') {\n          formData.append(key, data[key]);\n        }\n      });\n      \n      if (selectedFile) {\n        formData.append('receipt', selectedFile);\n      }\n\n      return await fetch(\"/api/income\", {\n        method: \"POST\",\n        body: formData,\n        credentials: \"include\",\n      }).then(async res => {\n        if (!res.ok) {\n          throw new Error(`${res.status}: ${await res.text()}`);\n        }\n        return res.json();\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/income\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/activities\"] });\n      setIsAddDialogOpen(false);\n      form.reset();\n      setSelectedFile(null);\n      setIncomeType(\"\");\n      toast({\n        title: \"ÿ™ŸÖ ÿ®ŸÜÿ¨ÿßÿ≠\",\n        description: \"ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿ•ÿØÿÆÿßŸÑ ÿ®ŸÜÿ¨ÿßÿ≠\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"ÿ∫Ÿäÿ± ŸÖÿµÿ±ÿ≠\",\n          description: \"ÿ¨ÿßÿ±Ÿä ÿ•ÿπÿßÿØÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"ÿÆÿ∑ÿ£\",\n        description: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿ•ÿØÿÆÿßŸÑ\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const editIncomeMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const formData = new FormData();\n      Object.keys(data).forEach(key => {\n        if (data[key] !== null && data[key] !== undefined && data[key] !== '') {\n          formData.append(key, data[key]);\n        }\n      });\n      \n      if (selectedFile) {\n        formData.append('receipt', selectedFile);\n      }\n\n      return await fetch(`/api/income/${id}`, {\n        method: \"PUT\",\n        body: formData,\n        credentials: \"include\",\n      }).then(async res => {\n        if (!res.ok) {\n          throw new Error(`${res.status}: ${await res.text()}`);\n        }\n        return res.json();\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/income\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/activities\"] });\n      setIsEditDialogOpen(false);\n      setEditingEntry(null);\n      form.reset();\n      setSelectedFile(null);\n      setIncomeType(\"\");\n      toast({\n        title: \"ÿ™ŸÖ ÿ®ŸÜÿ¨ÿßÿ≠\",\n        description: \"ÿ™ŸÖ ÿ™ÿπÿØŸäŸÑ ÿßŸÑÿ•ÿØÿÆÿßŸÑ ÿ®ŸÜÿ¨ÿßÿ≠\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"ÿÆÿ∑ÿ£\",\n        description: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ™ÿπÿØŸäŸÑ ÿßŸÑÿ•ÿØÿÆÿßŸÑ\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteIncomeMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/income/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/income\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/activities\"] });\n      toast({\n        title: \"ÿ™ŸÖ ÿ®ŸÜÿ¨ÿßÿ≠\",\n        description: \"ÿ™ŸÖ ÿ≠ÿ∞ŸÅ ÿßŸÑÿ•ÿØÿÆÿßŸÑ ÿ®ŸÜÿ¨ÿßÿ≠\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"ÿÆÿ∑ÿ£\",\n        description: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ≠ÿ∞ŸÅ ÿßŸÑÿ•ÿØÿÆÿßŸÑ\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    if (editingEntry) {\n      editIncomeMutation.mutate({ id: editingEntry.id, data });\n    } else {\n      addIncomeMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (entry: any) => {\n    setEditingEntry(entry);\n    form.reset({\n      type: entry.type,\n      printType: entry.printType || \"\",\n      amount: entry.amount.toString(),\n      customerId: entry.customerId || \"\",\n      description: entry.description || \"\"\n    });\n    setIncomeType(entry.type);\n    setIsEditDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (window.confirm('ŸáŸÑ ÿ£ŸÜÿ™ ŸÖÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ≠ÿ∞ŸÅ Ÿáÿ∞ÿß ÿßŸÑÿ•ÿØÿÆÿßŸÑÿü')) {\n      deleteIncomeMutation.mutate(id);\n    }\n  };\n\n  const handleTypeChange = (value: string) => {\n    setIncomeType(value);\n    form.setValue(\"type\", value);\n    if (value !== \"prints\") {\n      form.setValue(\"printType\", \"\");\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen gradient-bg\">\n      <Header />\n      \n      <main className=\"max-w-7xl mx-auto px-6 py-8\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center space-x-4 space-x-reverse\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back\">\n                <ArrowRight className=\"w-4 h-4 ml-2\" />\n                ÿßŸÑÿπŸàÿØÿ© ŸÑŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©\n              </Button>\n            </Link>\n            <div>\n              <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ•ÿØÿÆÿßŸÑÿßÿ™</h1>\n              <p className=\"text-gray-300\" data-testid=\"text-page-subtitle\">ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿ≠ŸàÿßŸÑÿßÿ™ ŸàÿßŸÑŸÖÿ∑ÿ®Ÿàÿπÿßÿ™</p>\n            </div>\n          </div>\n          \n          <Dialog \n            open={isAddDialogOpen || isEditDialogOpen} \n            onOpenChange={(open) => {\n              if (!open) {\n                setIsAddDialogOpen(false);\n                setIsEditDialogOpen(false);\n                setEditingEntry(null);\n                form.reset();\n                setSelectedFile(null);\n                setIncomeType(\"\");\n              }\n            }}\n          >\n            <DialogTrigger asChild>\n              <Button \n                className=\"gradient-green hover:scale-105 transition-transform\" \n                data-testid=\"button-add-income\"\n                onClick={() => setIsAddDialogOpen(true)}\n              >\n                <Plus className=\"w-4 h-4 ml-2\" />\n                ÿ•ÿ∂ÿßŸÅÿ© ÿ•ÿØÿÆÿßŸÑ\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-lg glass-card border-white/20\">\n              <DialogHeader>\n                <DialogTitle data-testid=\"text-dialog-title\">\n                  {editingEntry ? 'ÿ™ÿπÿØŸäŸÑ ÿßŸÑÿ•ÿØÿÆÿßŸÑ' : 'ÿ•ÿ∂ÿßŸÅÿ© ÿ•ÿØÿÆÿßŸÑ ÿ¨ÿØŸäÿØ'}\n                </DialogTitle>\n              </DialogHeader>\n              \n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"type\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>ŸÜŸàÿπ ÿßŸÑÿ≠ŸàÿßŸÑÿ©</FormLabel>\n                        <Select onValueChange={handleTypeChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger className=\"glass-card border-white/20\" data-testid=\"select-income-type\">\n                              <SelectValue placeholder=\"ÿßÿÆÿ™ÿ± ŸÜŸàÿπ ÿßŸÑÿ≠ŸàÿßŸÑÿ©\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"prints\">ŸÖÿ∑ÿ®Ÿàÿπÿßÿ™</SelectItem>\n                            <SelectItem value=\"subscription\">ÿßÿ¥ÿ™ÿ±ÿßŸÉ</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  {incomeType === \"prints\" && (\n                    <FormField\n                      control={form.control}\n                      name=\"printType\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>ŸÜŸàÿπ ÿßŸÑŸÖÿ∑ÿ®Ÿàÿπ</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"ÿ£ÿØÿÆŸÑ ŸÜŸàÿπ ÿßŸÑŸÖÿ∑ÿ®Ÿàÿπ\" \n                              className=\"glass-card border-white/20 focus:border-green-400\"\n                              data-testid=\"input-print-type\"\n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  )}\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"amount\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>ÿßŸÑŸÖÿ®ŸÑÿ∫ (ÿØŸäŸÜÿßÿ± ÿπÿ±ÿßŸÇŸä)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\"\n                            placeholder=\"0\" \n                            className=\"glass-card border-white/20 focus:border-green-400\"\n                            data-testid=\"input-amount\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"customerId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>ÿßŸÑÿπŸÖŸäŸÑ</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger className=\"glass-card border-white/20\" data-testid=\"select-customer\">\n                              <SelectValue placeholder=\"ÿßÿÆÿ™ÿ± ÿßŸÑÿπŸÖŸäŸÑ\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {customers?.map((customer: any) => (\n                              <SelectItem key={customer.id} value={customer.id}>\n                                {customer.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <div>\n                    <Label className=\"text-sm font-medium mb-2 block\">ÿ±ŸÅÿπ ÿßŸÑŸÅŸäÿ¥ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä</Label>\n                    <FileUpload \n                      onFileSelect={setSelectedFile}\n                      accept=\"image/*,application/pdf\"\n                      data-testid=\"file-upload-receipt\"\n                    />\n                  </div>\n                  \n                  <Button \n                    type=\"submit\" \n                    className=\"w-full gradient-green hover:scale-105 transition-transform\"\n                    disabled={addIncomeMutation.isPending || editIncomeMutation.isPending}\n                    data-testid=\"button-submit-income\"\n                  >\n                    {(addIncomeMutation.isPending || editIncomeMutation.isPending) \n                      ? \"ÿ¨ÿßÿ±Ÿä ÿßŸÑÿ≠ŸÅÿ∏...\" \n                      : editingEntry \n                        ? \"ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ•ÿØÿÆÿßŸÑ\" \n                        : \"ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿ•ÿØÿÆÿßŸÑ\"\n                    }\n                  </Button>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Income Entries List */}\n        <GlassCard className=\"p-6\">\n          <h2 className=\"text-xl font-semibold mb-6\" data-testid=\"text-income-list-title\">ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ•ÿØÿÆÿßŸÑÿßÿ™</h2>\n          \n          {isLoading ? (\n            <div className=\"text-center py-12\">\n              <div className=\"animate-spin w-8 h-8 border-4 border-green-500 border-t-transparent rounded-full mx-auto mb-4\"></div>\n              <p className=\"text-gray-400\">ÿ¨ÿßÿ±Ÿä ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ•ÿØÿÆÿßŸÑÿßÿ™...</p>\n            </div>\n          ) : incomeEntries?.length ? (\n            <div className=\"grid gap-4\">\n              {incomeEntries.map((entry: any, index: number) => (\n                <GlassCard \n                  key={entry.id} \n                  className=\"p-6\"\n                  data-testid={`card-income-${index}`}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4 space-x-reverse\">\n                      <div className={`w-12 h-12 gradient-${entry.type === 'prints' ? 'orange' : 'blue'} rounded-full flex items-center justify-center`}>\n                        <DollarSign className=\"w-6 h-6\" />\n                      </div>\n                      <div>\n                        <h3 className=\"text-lg font-semibold\" data-testid={`text-income-type-${index}`}>\n                          {entry.type === 'prints' ? 'ŸÖÿ∑ÿ®Ÿàÿπÿßÿ™' : 'ÿßÿ¥ÿ™ÿ±ÿßŸÉ'}\n                          {entry.printType && ` - ${entry.printType}`}\n                        </h3>\n                        <p className=\"text-2xl font-bold text-green-400\" data-testid={`text-income-amount-${index}`}>\n                          {entry.amount} ÿØ.ÿπ\n                        </p>\n                        <p className=\"text-sm text-gray-400\" data-testid={`text-income-date-${index}`}>\n                          {new Date(entry.createdAt).toLocaleDateString('ar-IQ')}\n                        </p>\n                        {entry.description && (\n                          <p className=\"text-sm text-gray-300\" data-testid={`text-income-description-${index}`}>\n                            {entry.description}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-left flex flex-col gap-2\">\n                      {entry.receiptUrl && (\n                        <Button\n                          asChild\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"border-blue-400 text-blue-400 hover:bg-blue-400/10\"\n                          data-testid={`button-view-receipt-${index}`}\n                        >\n                          <a \n                            href={entry.receiptUrl} \n                            target=\"_blank\" \n                            rel=\"noopener noreferrer\"\n                          >\n                            <Upload className=\"w-4 h-4 ml-1\" />\n                            ÿπÿ±ÿ∂ ÿßŸÑŸÅŸäÿ¥\n                          </a>\n                        </Button>\n                      )}\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"border-yellow-400 text-yellow-400 hover:bg-yellow-400/10\"\n                          onClick={() => handleEdit(entry)}\n                          data-testid={`button-edit-income-${index}`}\n                        >\n                          <Edit2 className=\"w-4 h-4 ml-1\" />\n                          ÿ™ÿπÿØŸäŸÑ\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"border-red-400 text-red-400 hover:bg-red-400/10\"\n                          onClick={() => handleDelete(entry.id)}\n                          disabled={deleteIncomeMutation.isPending}\n                          data-testid={`button-delete-income-${index}`}\n                        >\n                          <Trash2 className=\"w-4 h-4 ml-1\" />\n                          ÿ≠ÿ∞ŸÅ\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </GlassCard>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12 text-gray-400\">\n              <DollarSign className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n              <p data-testid=\"text-no-income\">ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ•ÿØÿÆÿßŸÑÿßÿ™ ŸÖÿ≥ÿ¨ŸÑÿ© ÿ®ÿπÿØ</p>\n              <p className=\"text-sm mt-2\">ÿßÿ®ÿØÿ£ ÿ®ÿ™ÿ≥ÿ¨ŸäŸÑ ÿ£ŸàŸÑ ÿ•ÿØÿÆÿßŸÑ</p>\n            </div>\n          )}\n        </GlassCard>\n      </main>\n    </div>\n  );\n}\n","size_bytes":19535},"client/src/pages/landing.tsx":{"content":"import { GlassCard } from \"@/components/ui/glass-card\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Landing() {\n  const handleLogin = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen gradient-bg flex items-center justify-center p-4\">\n      <GlassCard className=\"max-w-md w-full p-8 text-center animate-float\">\n        <div className=\"w-20 h-20 gradient-purple rounded-full flex items-center justify-center mx-auto mb-6 animate-glow\">\n          <i className=\"fas fa-chart-line text-3xl text-white\"></i>\n        </div>\n        \n        <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-landing-title\">IQR CONTROL</h1>\n        <p className=\"text-gray-300 mb-8\" data-testid=\"text-landing-subtitle\">\n          ŸÜÿ∏ÿßŸÖ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ£ÿπŸÖÿßŸÑ ÿßŸÑŸÖÿ™ŸÉÿßŸÖŸÑ\n        </p>\n        \n        <div className=\"space-y-4\">\n          <p className=\"text-sm text-gray-400\" data-testid=\"text-landing-description\">\n            ÿ•ÿØÿßÿ±ÿ© ÿ¥ÿßŸÖŸÑÿ© ŸÑŸÑÿπŸÖŸÑÿßÿ° ŸàÿßŸÑŸÖÿßŸÑŸäÿ© ŸàÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ ŸàÿßŸÑÿ™ŸÇÿßÿ±Ÿäÿ±\n          </p>\n          \n          <Button \n            onClick={handleLogin}\n            className=\"w-full gradient-purple hover:scale-105 transition-transform duration-300 py-3\"\n            data-testid=\"button-login\"\n          >\n            ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ\n          </Button>\n        </div>\n        \n        <div className=\"mt-8 grid grid-cols-2 gap-4 text-xs text-gray-400\">\n          <div className=\"flex items-center space-x-2 space-x-reverse\">\n            <div className=\"w-2 h-2 bg-green-400 rounded-full\"></div>\n            <span>ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿπŸÖŸÑÿßÿ°</span>\n          </div>\n          <div className=\"flex items-center space-x-2 space-x-reverse\">\n            <div className=\"w-2 h-2 bg-blue-400 rounded-full\"></div>\n            <span>ÿßŸÑÿ™ŸÇÿßÿ±Ÿäÿ± ÿßŸÑŸÖÿßŸÑŸäÿ©</span>\n          </div>\n          <div className=\"flex items-center space-x-2 space-x-reverse\">\n            <div className=\"w-2 h-2 bg-purple-400 rounded-full\"></div>\n            <span>ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ</span>\n          </div>\n          <div className=\"flex items-center space-x-2 space-x-reverse\">\n            <div className=\"w-2 h-2 bg-orange-400 rounded-full\"></div>\n            <span>ÿßŸÑŸÖÿ∑ÿ®Ÿàÿπÿßÿ™</span>\n          </div>\n        </div>\n      </GlassCard>\n    </div>\n  );\n}\n","size_bytes":2376},"client/src/pages/login.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { GlassCard } from '@/components/ui/glass-card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: { username: string; password: string }) => {\n      const response = await apiRequest('POST', '/api/auth/login', credentials);\n      return response.json();\n    },\n    onSuccess: (user) => {\n      queryClient.setQueryData(['/api/auth/user'], user);\n      toast({\n        title: 'ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ÿ®ŸÜÿ¨ÿßÿ≠',\n        description: `ŸÖÿ±ÿ≠ÿ®ÿßŸã ${user.firstName || user.username}`,\n      });\n      setLocation('/');\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'ÿÆÿ∑ÿ£ ŸÅŸä ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ',\n        description: error.message || 'ŸÅÿ¥ŸÑ ŸÅŸä ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (username.trim() && password.trim()) {\n      loginMutation.mutate({ username: username.trim(), password: password.trim() });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen gradient-bg flex items-center justify-center p-4\">\n      <GlassCard className=\"max-w-md w-full p-8\">\n        <div className=\"text-center mb-8\">\n          <div className=\"w-20 h-20 gradient-purple rounded-full flex items-center justify-center mx-auto mb-4 animate-glow\">\n            <i className=\"fas fa-chart-line text-3xl text-white\"></i>\n          </div>\n          <h1 className=\"text-2xl font-bold mb-2\" data-testid=\"text-login-title\">ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ</h1>\n          <p className=\"text-gray-300\" data-testid=\"text-login-subtitle\">IQR CONTROL</p>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"username\" className=\"text-right block\">ÿßÿ≥ŸÖ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ</Label>\n            <Input\n              id=\"username\"\n              type=\"text\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n              placeholder=\"ÿ£ÿØÿÆŸÑ ÿßÿ≥ŸÖ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ\"\n              className=\"text-right\"\n              data-testid=\"input-username\"\n              required\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\" className=\"text-right block\">ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±</Label>\n            <Input\n              id=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              placeholder=\"ÿ£ÿØÿÆŸÑ ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±\"\n              className=\"text-right\"\n              data-testid=\"input-password\"\n              required\n            />\n          </div>\n\n          <Button\n            type=\"submit\"\n            className=\"w-full gradient-purple hover:scale-105 transition-transform duration-300\"\n            disabled={loginMutation.isPending}\n            data-testid=\"button-login\"\n          >\n            {loginMutation.isPending ? 'ÿ¨ÿßÿ±Ÿä ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ...' : 'ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ'}\n          </Button>\n        </form>\n\n        <div className=\"mt-6 text-center text-sm text-gray-400\">\n          <p>ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑÿßŸÅÿ™ÿ±ÿßÿ∂Ÿä: admin</p>\n          <p>ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±: admin123</p>\n        </div>\n      </GlassCard>\n    </div>\n  );\n}","size_bytes":3915},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/prints.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { ArrowRight, Printer, DollarSign } from \"lucide-react\";\nimport { Header } from \"@/components/layout/header\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function Prints() {\n  const { toast } = useToast();\n\n  const { data: printEntries, isLoading, error: printError } = useQuery({\n    queryKey: [\"/api/income/prints\"]\n  });\n\n  if (printError && isUnauthorizedError(printError as Error)) {\n    toast({\n      title: \"ÿ∫Ÿäÿ± ŸÖÿµÿ±ÿ≠\",\n      description: \"ÿ¨ÿßÿ±Ÿä ÿ•ÿπÿßÿØÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ...\",\n      variant: \"destructive\",\n    });\n    setTimeout(() => {\n      window.location.href = \"/api/login\";\n    }, 500);\n  }\n\n  // Calculate total prints revenue\n  const totalRevenue = printEntries?.reduce((sum: number, entry: any) => sum + Number(entry.amount), 0) || 0;\n\n  return (\n    <div className=\"min-h-screen gradient-bg\">\n      <Header />\n      \n      <main className=\"max-w-7xl mx-auto px-6 py-8\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center space-x-4 space-x-reverse\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back\">\n                <ArrowRight className=\"w-4 h-4 ml-2\" />\n                ÿßŸÑÿπŸàÿØÿ© ŸÑŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©\n              </Button>\n            </Link>\n            <div>\n              <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">ŸÇÿ≥ŸÖ ÿßŸÑŸÖÿ∑ÿ®Ÿàÿπÿßÿ™</h1>\n              <p className=\"text-gray-300\" data-testid=\"text-page-subtitle\">ÿπÿ±ÿ∂ ÿ¨ŸÖŸäÿπ ÿßŸÑŸÖÿ∑ÿ®Ÿàÿπÿßÿ™ ŸàÿßŸÑÿ•Ÿäÿ±ÿßÿØÿßÿ™ ÿßŸÑŸÖÿ≠ŸÇŸÇÿ©</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Summary Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          <GlassCard className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-300 text-sm\" data-testid=\"text-total-orders\">ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™</p>\n                <p className=\"text-2xl font-bold\" data-testid=\"text-total-orders-count\">\n                  {isLoading ? \"...\" : printEntries?.length || 0}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 gradient-orange rounded-full flex items-center justify-center\">\n                <Printer className=\"w-6 h-6\" />\n              </div>\n            </div>\n          </GlassCard>\n\n          <GlassCard className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-300 text-sm\" data-testid=\"text-total-revenue\">ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑÿ•Ÿäÿ±ÿßÿØÿßÿ™</p>\n                <p className=\"text-2xl font-bold text-green-400\" data-testid=\"text-total-revenue-amount\">\n                  {isLoading ? \"...\" : `${totalRevenue} ÿØ.ÿπ`}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 gradient-green rounded-full flex items-center justify-center\">\n                <DollarSign className=\"w-6 h-6\" />\n              </div>\n            </div>\n          </GlassCard>\n\n          <GlassCard className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-300 text-sm\" data-testid=\"text-average-order\">ŸÖÿ™Ÿàÿ≥ÿ∑ ÿßŸÑÿ∑ŸÑÿ®</p>\n                <p className=\"text-2xl font-bold text-blue-400\" data-testid=\"text-average-order-amount\">\n                  {isLoading ? \"...\" : printEntries?.length ? `${Math.round(totalRevenue / printEntries.length)} ÿØ.ÿπ` : \"0 ÿØ.ÿπ\"}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 gradient-blue rounded-full flex items-center justify-center\">\n                <DollarSign className=\"w-6 h-6\" />\n              </div>\n            </div>\n          </GlassCard>\n        </div>\n\n        {/* Print Entries List */}\n        <GlassCard className=\"p-6\">\n          <h2 className=\"text-xl font-semibold mb-6\" data-testid=\"text-prints-list-title\">ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑŸÖÿ∑ÿ®Ÿàÿπÿßÿ™</h2>\n          \n          {isLoading ? (\n            <div className=\"text-center py-12\">\n              <div className=\"animate-spin w-8 h-8 border-4 border-orange-500 border-t-transparent rounded-full mx-auto mb-4\"></div>\n              <p className=\"text-gray-400\">ÿ¨ÿßÿ±Ÿä ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑŸÖÿ∑ÿ®Ÿàÿπÿßÿ™...</p>\n            </div>\n          ) : printEntries?.length ? (\n            <div className=\"grid gap-4\">\n              {printEntries.map((entry: any, index: number) => (\n                <GlassCard \n                  key={entry.id} \n                  className=\"p-6\"\n                  data-testid={`card-print-${index}`}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4 space-x-reverse\">\n                      <div className=\"w-12 h-12 gradient-orange rounded-full flex items-center justify-center\">\n                        <Printer className=\"w-6 h-6\" />\n                      </div>\n                      <div>\n                        <h3 className=\"text-lg font-semibold\" data-testid={`text-print-type-${index}`}>\n                          {entry.printType || \"ŸÖÿ∑ÿ®Ÿàÿπ\"}\n                        </h3>\n                        <p className=\"text-2xl font-bold text-green-400\" data-testid={`text-print-amount-${index}`}>\n                          {entry.amount} ÿØ.ÿπ\n                        </p>\n                        <p className=\"text-sm text-gray-400\" data-testid={`text-print-date-${index}`}>\n                          {new Date(entry.createdAt).toLocaleDateString('ar-IQ')} - {new Date(entry.createdAt).toLocaleTimeString('ar-IQ')}\n                        </p>\n                        {entry.description && (\n                          <p className=\"text-sm text-gray-300 mt-1\" data-testid={`text-print-description-${index}`}>\n                            {entry.description}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-left\">\n                      {entry.receiptUrl && (\n                        <Button\n                          asChild\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"border-blue-400 text-blue-400 hover:bg-blue-400/10\"\n                          data-testid={`button-view-receipt-${index}`}\n                        >\n                          <a \n                            href={entry.receiptUrl} \n                            target=\"_blank\" \n                            rel=\"noopener noreferrer\"\n                          >\n                            ÿπÿ±ÿ∂ ÿßŸÑŸÅŸäÿ¥\n                          </a>\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </GlassCard>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12 text-gray-400\">\n              <Printer className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n              <p data-testid=\"text-no-prints\">ŸÑÿß ÿ™Ÿàÿ¨ÿØ ŸÖÿ∑ÿ®Ÿàÿπÿßÿ™ ŸÖÿ≥ÿ¨ŸÑÿ© ÿ®ÿπÿØ</p>\n              <p className=\"text-sm mt-2\">ÿ≥ÿ™ÿ∏Ÿáÿ± ŸáŸÜÿß ÿ¨ŸÖŸäÿπ ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÑŸÖÿ∑ÿ®Ÿàÿπÿ©</p>\n            </div>\n          )}\n        </GlassCard>\n      </main>\n    </div>\n  );\n}\n","size_bytes":7604},"client/src/pages/reports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { Link } from \"wouter\";\nimport { ArrowRight, BarChart3, Download, Calendar, FileText, DollarSign, Users, Printer } from \"lucide-react\";\nimport { Header } from \"@/components/layout/header\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { generatePDFReport } from \"@/lib/pdf-generator\";\n\nexport default function Reports() {\n  const [selectedReportType, setSelectedReportType] = useState(\"\");\n  const [dateRange, setDateRange] = useState({\n    startDate: \"\",\n    endDate: \"\"\n  });\n  const { toast } = useToast();\n\n  const form = useForm({\n    defaultValues: {\n      startDate: \"\",\n      endDate: \"\",\n      reportType: \"\",\n    },\n  });\n\n  // Get data for summary based on date range\n  const { data: incomeData, error: incomeDataError } = useQuery({\n    queryKey: [\"/api/income\", dateRange.startDate, dateRange.endDate],\n    enabled: !!(dateRange.startDate && dateRange.endDate)\n  });\n\n  if (incomeDataError && isUnauthorizedError(incomeDataError as Error)) {\n    toast({\n      title: \"ÿ∫Ÿäÿ± ŸÖÿµÿ±ÿ≠\",\n      description: \"ÿ¨ÿßÿ±Ÿä ÿ•ÿπÿßÿØÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ...\",\n      variant: \"destructive\",\n    });\n    setTimeout(() => {\n      window.location.href = \"/api/login\";\n    }, 500);\n  }\n\n  const { data: expenseData, error: expenseDataError } = useQuery({\n    queryKey: [\"/api/expenses\", dateRange.startDate, dateRange.endDate],\n    enabled: !!(dateRange.startDate && dateRange.endDate)\n  });\n\n  if (expenseDataError && isUnauthorizedError(expenseDataError as Error)) {\n    toast({\n      title: \"ÿ∫Ÿäÿ± ŸÖÿµÿ±ÿ≠\",\n      description: \"ÿ¨ÿßÿ±Ÿä ÿ•ÿπÿßÿØÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ...\",\n      variant: \"destructive\",\n    });\n    setTimeout(() => {\n      window.location.href = \"/api/login\";\n    }, 500);\n  }\n\n  const { data: customers, error: customersDataError } = useQuery({\n    queryKey: [\"/api/customers\"]\n  });\n\n  if (customersDataError && isUnauthorizedError(customersDataError as Error)) {\n    toast({\n      title: \"ÿ∫Ÿäÿ± ŸÖÿµÿ±ÿ≠\",\n      description: \"ÿ¨ÿßÿ±Ÿä ÿ•ÿπÿßÿØÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ...\",\n      variant: \"destructive\",\n    });\n    setTimeout(() => {\n      window.location.href = \"/api/login\";\n    }, 500);\n  }\n\n  const { data: employees, error: employeesDataError } = useQuery({\n    queryKey: [\"/api/employees\"]\n  });\n\n  if (employeesDataError && isUnauthorizedError(employeesDataError as Error)) {\n    toast({\n      title: \"ÿ∫Ÿäÿ± ŸÖÿµÿ±ÿ≠\",\n      description: \"ÿ¨ÿßÿ±Ÿä ÿ•ÿπÿßÿØÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ...\",\n      variant: \"destructive\",\n    });\n    setTimeout(() => {\n      window.location.href = \"/api/login\";\n    }, 500);\n  }\n\n  const generateReportMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/reports/generate\", data);\n    },\n    onSuccess: (response: any) => {\n      if (response.success && response.data) {\n        // Generate and download PDF\n        generatePDFReport(response.data);\n        \n        toast({\n          title: \"ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ™ŸÇÿ±Ÿäÿ±\",\n          description: \"ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° Ÿàÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ™ŸÇÿ±Ÿäÿ± ÿ®ÿµŸäÿ∫ÿ© PDF ÿ®ŸÜÿ¨ÿßÿ≠\",\n        });\n      } else {\n        toast({\n          title: \"ÿÆÿ∑ÿ£\",\n          description: \"ŸÅÿ¥ŸÑ ŸÅŸä ŸÖÿπÿßŸÑÿ¨ÿ© ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ™ŸÇÿ±Ÿäÿ±\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"ÿ∫Ÿäÿ± ŸÖÿµÿ±ÿ≠\",\n          description: \"ÿ¨ÿßÿ±Ÿä ÿ•ÿπÿßÿØÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"ÿÆÿ∑ÿ£\",\n        description: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ™ŸÇÿ±Ÿäÿ±\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    if (!data.startDate || !data.endDate || !data.reportType) {\n      toast({\n        title: \"ÿ®ŸäÿßŸÜÿßÿ™ ŸÜÿßŸÇÿµÿ©\",\n        description: \"Ÿäÿ±ÿ¨Ÿâ ÿßÿÆÿ™Ÿäÿßÿ± ÿßŸÑÿ™ÿßÿ±ŸäÿÆ ŸàŸÜŸàÿπ ÿßŸÑÿ™ŸÇÿ±Ÿäÿ±\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    generateReportMutation.mutate(data);\n  };\n\n  const handleDateRangeChange = (field: string, value: string) => {\n    setDateRange(prev => ({ ...prev, [field]: value }));\n    form.setValue(field as any, value);\n  };\n\n  const reportTypes = [\n    { \n      value: \"financial\", \n      label: \"ÿßŸÑÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑŸÖÿßŸÑŸä\", \n      description: \"ÿ™ÿ≠ŸÑŸäŸÑ ÿ¥ÿßŸÖŸÑ ŸÑŸÑÿ•Ÿäÿ±ÿßÿØÿßÿ™ ŸàÿßŸÑŸÖÿµÿ±ŸàŸÅÿßÿ™ ŸÖÿπ ÿ≠ÿ≥ÿßÿ®ÿßÿ™ ÿßŸÑÿ£ÿ±ÿ®ÿßÿ≠ ŸàÿßŸÑÿÆÿ≥ÿßÿ¶ÿ±\",\n      details: \"Ÿäÿ¥ŸÖŸÑ: ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑÿØÿÆŸÑÿå ÿßŸÑŸÖÿµÿ±ŸàŸÅÿßÿ™ÿå ÿµÿßŸÅŸä ÿßŸÑÿ±ÿ®ÿ≠ÿå ÿ±ÿ≥ŸàŸÖ ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉÿßÿ™\"\n    },\n    { \n      value: \"customers\", \n      label: \"ÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑÿπŸÖŸÑÿßÿ°\", \n      description: \"ÿ™ÿ≠ŸÑŸäŸÑ ŸÖŸÅÿµŸÑ ŸÑÿ≠ÿßŸÑÿ© ÿßŸÑÿπŸÖŸÑÿßÿ° ŸàÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉÿßÿ™\",\n      details: \"Ÿäÿ¥ŸÖŸÑ: ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿπŸÖŸÑÿßÿ°ÿå ÿ≠ÿßŸÑÿ© ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉÿßÿ™ÿå ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉÿßÿ™ ÿßŸÑŸÖŸÜÿ™ŸáŸäÿ© ŸàÿßŸÑŸÖŸÜÿ™ŸáŸäÿ© ŸÇÿ±Ÿäÿ®ÿßŸã\"\n    },\n    { \n      value: \"employees\", \n      label: \"ÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ\", \n      description: \"ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ ŸàÿßŸÑÿ±Ÿàÿßÿ™ÿ® ŸàÿßŸÑÿ™ŸÉÿßŸÑŸäŸÅ ÿßŸÑÿ•ÿØÿßÿ±Ÿäÿ©\",\n      details: \"Ÿäÿ¥ŸÖŸÑ: ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜÿå ÿßŸÑŸÖŸÜÿßÿµÿ®ÿå ÿßŸÑÿ±Ÿàÿßÿ™ÿ®ÿå ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑÿ™ŸÉÿßŸÑŸäŸÅ\"\n    },\n    { \n      value: \"prints\", \n      label: \"ÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑŸÖÿ∑ÿ®Ÿàÿπÿßÿ™\", \n      description: \"ÿ™ÿ≠ŸÑŸäŸÑ ŸÖŸÅÿµŸÑ ŸÑÿ•Ÿäÿ±ÿßÿØÿßÿ™ ÿßŸÑŸÖÿ∑ÿ®Ÿàÿπÿßÿ™ ŸàÿßŸÑÿÆÿØŸÖÿßÿ™ ÿßŸÑÿ•ÿ∂ÿßŸÅŸäÿ©\",\n      details: \"Ÿäÿ¥ŸÖŸÑ: ÿØÿÆŸÑ ÿßŸÑŸÖÿ∑ÿ®Ÿàÿπÿßÿ™ÿå ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑÿπŸÖŸÑŸäÿßÿ™ÿå ÿßŸÑÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™ ÿßŸÑÿ¥Ÿáÿ±Ÿäÿ©\"\n    },\n    { \n      value: \"comprehensive\", \n      label: \"ÿßŸÑÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑÿ¥ÿßŸÖŸÑ ŸàÿßŸÑŸÖŸÅÿµŸÑ\", \n      description: \"ÿ™ŸÇÿ±Ÿäÿ± ŸÉÿßŸÖŸÑ ŸàŸÖŸÅÿµŸÑ Ÿäÿ¥ŸÖŸÑ ÿ¨ŸÖŸäÿπ ÿ¨ŸàÿßŸÜÿ® ÿßŸÑÿπŸÖŸÑ ŸàÿßŸÑÿ£ÿØÿßÿ°\",\n      details: \"Ÿäÿ¥ŸÖŸÑ: ŸÉŸÑ ŸÖÿß ÿ≥ÿ®ŸÇ + ÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™ ÿ¥ÿßŸÖŸÑÿ© ŸàŸÖŸÇÿßÿ±ŸÜÿßÿ™ Ÿàÿ™ÿ≠ŸÑŸäŸÑÿßÿ™ ÿ™ŸÅÿµŸäŸÑŸäÿ©\"\n    },\n  ];\n\n  // Calculate summary data\n  const totalIncome = Array.isArray(incomeData) ? incomeData.reduce((sum: number, entry: any) => sum + Number(entry.amount), 0) : 0;\n  const totalExpenses = Array.isArray(expenseData) ? expenseData.reduce((sum: number, entry: any) => sum + Number(entry.amount), 0) : 0;\n  const netProfit = totalIncome - totalExpenses;\n  const printIncome = Array.isArray(incomeData) ? incomeData.filter((entry: any) => entry.type === 'prints')\n    .reduce((sum: number, entry: any) => sum + Number(entry.amount), 0) : 0;\n\n  return (\n    <div className=\"min-h-screen gradient-bg\">\n      <Header />\n      \n      <main className=\"max-w-7xl mx-auto px-6 py-8\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center space-x-4 space-x-reverse\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back\">\n                <ArrowRight className=\"w-4 h-4 ml-2\" />\n                ÿßŸÑÿπŸàÿØÿ© ŸÑŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©\n              </Button>\n            </Link>\n            <div>\n              <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">ÿßŸÑÿ™ŸÇÿßÿ±Ÿäÿ±</h1>\n              <p className=\"text-gray-300\" data-testid=\"text-page-subtitle\">ÿ•ŸÜÿ¥ÿßÿ° Ÿàÿ™ÿµÿØŸäÿ± ÿßŸÑÿ™ŸÇÿßÿ±Ÿäÿ± ÿ®ÿµŸäÿ∫ÿ© PDF</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Report Generation Form */}\n        <GlassCard className=\"p-6 mb-8\">\n          <h2 className=\"text-xl font-semibold mb-6\" data-testid=\"text-generate-report-title\">ÿ•ŸÜÿ¥ÿßÿ° ÿ™ŸÇÿ±Ÿäÿ± ÿ¨ÿØŸäÿØ</h2>\n          \n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"startDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿ®ÿØÿßŸäÿ©</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"date\" \n                          className=\"glass-card border-white/20 focus:border-indigo-400\"\n                          data-testid=\"input-start-date\"\n                          onChange={(e) => {\n                            field.onChange(e);\n                            handleDateRangeChange('startDate', e.target.value);\n                          }}\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"endDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑŸÜŸáÿßŸäÿ©</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"date\" \n                          className=\"glass-card border-white/20 focus:border-indigo-400\"\n                          data-testid=\"input-end-date\"\n                          onChange={(e) => {\n                            field.onChange(e);\n                            handleDateRangeChange('endDate', e.target.value);\n                          }}\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <FormField\n                control={form.control}\n                name=\"reportType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>ŸÜŸàÿπ ÿßŸÑÿ™ŸÇÿ±Ÿäÿ±</FormLabel>\n                    <Select \n                      onValueChange={(value) => {\n                        field.onChange(value);\n                        setSelectedReportType(value);\n                      }} \n                      value={field.value}\n                    >\n                      <FormControl>\n                        <SelectTrigger className=\"glass-card border-white/20\" data-testid=\"select-report-type\">\n                          <SelectValue placeholder=\"ÿßÿÆÿ™ÿ± ŸÜŸàÿπ ÿßŸÑÿ™ŸÇÿ±Ÿäÿ±\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {reportTypes.map((type) => (\n                          <SelectItem key={type.value} value={type.value}>\n                            <div className=\"py-2\">\n                              <div className=\"font-medium text-base\">{type.label}</div>\n                              <div className=\"text-sm text-gray-400 mb-1\">{type.description}</div>\n                              <div className=\"text-xs text-gray-500\">{type.details}</div>\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <Button \n                type=\"submit\" \n                className=\"w-full gradient-indigo hover:scale-105 transition-transform\"\n                disabled={generateReportMutation.isPending}\n                data-testid=\"button-generate-report\"\n              >\n                <Download className=\"w-4 h-4 ml-2\" />\n                {generateReportMutation.isPending ? \"ÿ¨ÿßÿ±Ÿä ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ™ŸÇÿ±Ÿäÿ±...\" : \"ÿ•ŸÜÿ¥ÿßÿ° Ÿàÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ™ŸÇÿ±Ÿäÿ± PDF\"}\n              </Button>\n            </form>\n          </Form>\n        </GlassCard>\n\n        {/* Data Summary */}\n        {(dateRange.startDate && dateRange.endDate) && (\n          <GlassCard className=\"p-6 mb-8\">\n            <h3 className=\"text-lg font-semibold mb-6\" data-testid=\"text-summary-title\">\n              ŸÖŸÑÿÆÿµ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸÑŸÑŸÅÿ™ÿ±ÿ© ({dateRange.startDate} - {dateRange.endDate})\n            </h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <GlassCard className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-gray-300 text-sm\" data-testid=\"text-total-income\">ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑÿØÿÆŸÑ</p>\n                    <p className=\"text-xl font-bold text-green-400\" data-testid=\"text-income-amount\">\n                      {totalIncome} ÿØ.ÿπ\n                    </p>\n                  </div>\n                  <div className=\"w-10 h-10 gradient-green rounded-full flex items-center justify-center\">\n                    <DollarSign className=\"w-5 h-5\" />\n                  </div>\n                </div>\n              </GlassCard>\n\n              <GlassCard className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-gray-300 text-sm\" data-testid=\"text-total-expenses\">ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑŸÖÿµÿ±ŸàŸÅÿßÿ™</p>\n                    <p className=\"text-xl font-bold text-red-400\" data-testid=\"text-expenses-amount\">\n                      {totalExpenses} ÿØ.ÿπ\n                    </p>\n                  </div>\n                  <div className=\"w-10 h-10 gradient-red rounded-full flex items-center justify-center\">\n                    <FileText className=\"w-5 h-5\" />\n                  </div>\n                </div>\n              </GlassCard>\n\n              <GlassCard className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-gray-300 text-sm\" data-testid=\"text-net-profit\">ÿµÿßŸÅŸä ÿßŸÑÿ±ÿ®ÿ≠</p>\n                    <p className={`text-xl font-bold ${netProfit >= 0 ? 'text-green-400' : 'text-red-400'}`} data-testid=\"text-profit-amount\">\n                      {netProfit} ÿØ.ÿπ\n                    </p>\n                  </div>\n                  <div className={`w-10 h-10 gradient-${netProfit >= 0 ? 'green' : 'red'} rounded-full flex items-center justify-center`}>\n                    <BarChart3 className=\"w-5 h-5\" />\n                  </div>\n                </div>\n              </GlassCard>\n\n              <GlassCard className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-gray-300 text-sm\" data-testid=\"text-print-income\">ÿØÿÆŸÑ ÿßŸÑŸÖÿ∑ÿ®Ÿàÿπÿßÿ™</p>\n                    <p className=\"text-xl font-bold text-orange-400\" data-testid=\"text-print-amount\">\n                      {printIncome} ÿØ.ÿπ\n                    </p>\n                  </div>\n                  <div className=\"w-10 h-10 gradient-orange rounded-full flex items-center justify-center\">\n                    <Printer className=\"w-5 h-5\" />\n                  </div>\n                </div>\n              </GlassCard>\n            </div>\n          </GlassCard>\n        )}\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <GlassCard className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-300 text-sm\" data-testid=\"text-total-customers\">ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑÿπŸÖŸÑÿßÿ°</p>\n                <p className=\"text-2xl font-bold text-purple-400\" data-testid=\"text-customers-count\">\n                  {Array.isArray(customers) ? customers.length : 0}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 gradient-purple rounded-full flex items-center justify-center\">\n                <Users className=\"w-6 h-6\" />\n              </div>\n            </div>\n          </GlassCard>\n\n          <GlassCard className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-300 text-sm\" data-testid=\"text-total-employees\">ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ</p>\n                <p className=\"text-2xl font-bold text-cyan-400\" data-testid=\"text-employees-count\">\n                  {Array.isArray(employees) ? employees.length : 0}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 gradient-cyan rounded-full flex items-center justify-center\">\n                <Users className=\"w-6 h-6\" />\n              </div>\n            </div>\n          </GlassCard>\n\n          <GlassCard className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-300 text-sm\" data-testid=\"text-available-reports\">ÿßŸÑÿ™ŸÇÿßÿ±Ÿäÿ± ÿßŸÑŸÖÿ™ÿßÿ≠ÿ©</p>\n                <p className=\"text-2xl font-bold text-indigo-400\" data-testid=\"text-reports-count\">\n                  {reportTypes.length}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 gradient-indigo rounded-full flex items-center justify-center\">\n                <BarChart3 className=\"w-6 h-6\" />\n              </div>\n            </div>\n          </GlassCard>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":17829},"client/src/pages/user-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { Link } from \"wouter\";\nimport { ArrowRight, UserPlus, Shield, Eye, Edit, Users, Crown } from \"lucide-react\";\nimport { Header } from \"@/components/layout/header\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { insertManualUserSchema } from \"@shared/schema\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nexport default function UserManagement() {\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const { toast } = useToast();\n  const { user: currentUser } = useAuth();\n\n  const form = useForm({\n    resolver: zodResolver(insertManualUserSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      role: \"viewer\",\n    },\n  });\n\n  const { data: users = [], isLoading, error: usersError } = useQuery({\n    queryKey: [\"/api/users\"],\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/users\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      setIsAddDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"ÿ™ŸÖ ÿ®ŸÜÿ¨ÿßÿ≠\",\n        description: \"ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ®ŸÜÿ¨ÿßÿ≠\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"ÿ∫Ÿäÿ± ŸÖÿµÿ±ÿ≠\",\n          description: \"ÿ¨ÿßÿ±Ÿä ÿ•ÿπÿßÿØÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"ÿÆÿ∑ÿ£\",\n        description: error.message || \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (usersError && isUnauthorizedError(usersError as Error)) {\n    toast({\n      title: \"ÿ∫Ÿäÿ± ŸÖÿµÿ±ÿ≠\",\n      description: \"ÿ¨ÿßÿ±Ÿä ÿ•ÿπÿßÿØÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ...\",\n      variant: \"destructive\",\n    });\n    setTimeout(() => {\n      window.location.href = \"/api/login\";\n    }, 500);\n  }\n\n  const onSubmit = (data: any) => {\n    createUserMutation.mutate(data);\n  };\n\n  const getRoleIcon = (role: string) => {\n    switch (role) {\n      case 'admin': return Crown;\n      case 'editor': return Edit;\n      case 'viewer': return Eye;\n      default: return Shield;\n    }\n  };\n\n  const getRoleText = (role: string) => {\n    switch (role) {\n      case 'admin': return 'ŸÖÿØŸäÿ±';\n      case 'editor': return 'ŸÖÿ≠ÿ±ÿ±';\n      case 'viewer': return 'ŸÖÿ¥ÿßŸáÿØ';\n      default: return 'ÿ∫Ÿäÿ± ŸÖÿ≠ÿØÿØ';\n    }\n  };\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case 'admin': return 'gradient-red';\n      case 'editor': return 'gradient-blue';\n      case 'viewer': return 'gradient-green';\n      default: return 'gradient-gray';\n    }\n  };\n\n  const getRoleBadgeColor = (role: string) => {\n    switch (role) {\n      case 'admin': return 'bg-red-500/20 text-red-400';\n      case 'editor': return 'bg-blue-500/20 text-blue-400';\n      case 'viewer': return 'bg-green-500/20 text-green-400';\n      default: return 'bg-gray-500/20 text-gray-400';\n    }\n  };\n\n  const rolePermissions = {\n    viewer: [\"ÿπÿ±ÿ∂ ŸÑŸàÿ≠ÿ© ÿßŸÑÿ™ÿ≠ŸÉŸÖ\", \"ÿπÿ±ÿ∂ ÿßŸÑÿ™ŸÇÿßÿ±Ÿäÿ±\", \"ÿπÿ±ÿ∂ ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿπŸÖŸÑÿßÿ°\"],\n    editor: [\"ÿπÿ±ÿ∂ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™\", \"ÿ•ÿ∂ÿßŸÅÿ© Ÿàÿ™ÿπÿØŸäŸÑ ÿßŸÑÿπŸÖŸÑÿßÿ°\", \"ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ•ÿØÿÆÿßŸÑÿßÿ™ ŸàÿßŸÑÿ•ÿÆÿ±ÿßÿ¨ÿßÿ™\", \"ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ\"],\n    admin: [\"ÿ¨ŸÖŸäÿπ ÿßŸÑÿµŸÑÿßÿ≠Ÿäÿßÿ™\", \"ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ\", \"ÿ≠ÿ∞ŸÅ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™\", \"ÿ™ÿµÿØŸäÿ± ÿßŸÑÿ™ŸÇÿßÿ±Ÿäÿ±\"],\n  };\n\n  return (\n    <div className=\"min-h-screen gradient-bg\">\n      <Header />\n      \n      <main className=\"max-w-7xl mx-auto px-6 py-8\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center space-x-4 space-x-reverse\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back\">\n                <ArrowRight className=\"w-4 h-4 ml-2\" />\n                ÿßŸÑÿπŸàÿØÿ© ŸÑŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©\n              </Button>\n            </Link>\n            <div>\n              <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ</h1>\n              <p className=\"text-gray-300\" data-testid=\"text-page-subtitle\">ÿ•ŸÜÿ¥ÿßÿ° ÿ≠ÿ≥ÿßÿ®ÿßÿ™ ŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ÿ®ÿµŸÑÿßÿ≠Ÿäÿßÿ™ ŸÖÿ≠ÿØÿØÿ©</p>\n            </div>\n          </div>\n          \n          <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gradient-purple hover:scale-105 transition-transform\" data-testid=\"button-add-user\">\n                <UserPlus className=\"w-4 h-4 ml-2\" />\n                ÿ•ÿ∂ÿßŸÅÿ© ŸÖÿ≥ÿ™ÿÆÿØŸÖ\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-md glass-card border-white/20\">\n              <DialogHeader>\n                <DialogTitle data-testid=\"text-dialog-title\">ÿ•ÿ∂ÿßŸÅÿ© ŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ¨ÿØŸäÿØ</DialogTitle>\n              </DialogHeader>\n              \n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"username\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>ÿßÿ≥ŸÖ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"username\" \n                            className=\"glass-card border-white/20 focus:border-purple-400\"\n                            data-testid=\"input-username\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"password\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"password\"\n                            placeholder=\"‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢\" \n                            className=\"glass-card border-white/20 focus:border-purple-400\"\n                            data-testid=\"input-password\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"role\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>ÿßŸÑÿµŸÑÿßÿ≠Ÿäÿ©</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger className=\"glass-card border-white/20\" data-testid=\"select-user-role\">\n                              <SelectValue placeholder=\"ÿßÿÆÿ™ÿ± ÿßŸÑÿµŸÑÿßÿ≠Ÿäÿ©\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"viewer\">ŸÖÿ¥ÿßŸáÿØ - ÿπÿ±ÿ∂ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸÅŸÇÿ∑</SelectItem>\n                            <SelectItem value=\"editor\">ŸÖÿ≠ÿ±ÿ± - ÿ•ÿ∂ÿßŸÅÿ© Ÿàÿ™ÿπÿØŸäŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™</SelectItem>\n                            <SelectItem value=\"admin\">ŸÖÿØŸäÿ± - ÿ¨ŸÖŸäÿπ ÿßŸÑÿµŸÑÿßÿ≠Ÿäÿßÿ™</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <Button \n                    type=\"submit\" \n                    className=\"w-full gradient-purple hover:scale-105 transition-transform\"\n                    disabled={createUserMutation.isPending}\n                    data-testid=\"button-submit-user\"\n                  >\n                    {createUserMutation.isPending ? \"ÿ¨ÿßÿ±Ÿä ÿßŸÑÿ•ŸÜÿ¥ÿßÿ°...\" : \"ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ\"}\n                  </Button>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Role Permissions Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          {Object.entries(rolePermissions).map(([role, permissions]) => {\n            const RoleIcon = getRoleIcon(role);\n            return (\n              <GlassCard key={role} className=\"p-6\">\n                <div className=\"flex items-center space-x-3 space-x-reverse mb-4\">\n                  <div className={`w-10 h-10 ${getRoleColor(role)} rounded-full flex items-center justify-center`}>\n                    <RoleIcon className=\"w-5 h-5\" />\n                  </div>\n                  <h3 className=\"text-lg font-semibold\" data-testid={`text-role-${role}`}>\n                    {getRoleText(role)}\n                  </h3>\n                </div>\n                <ul className=\"space-y-2 text-sm text-gray-300\">\n                  {permissions.map((permission, index) => (\n                    <li key={index} className=\"flex items-center space-x-2 space-x-reverse\">\n                      <div className=\"w-1.5 h-1.5 bg-current rounded-full\"></div>\n                      <span data-testid={`text-permission-${role}-${index}`}>{permission}</span>\n                    </li>\n                  ))}\n                </ul>\n              </GlassCard>\n            );\n          })}\n        </div>\n\n        {/* Users List */}\n        <GlassCard className=\"p-6\">\n          <h2 className=\"text-xl font-semibold mb-6\" data-testid=\"text-users-list-title\">ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ</h2>\n          \n          {isLoading ? (\n            <div className=\"text-center py-12\">\n              <div className=\"animate-spin w-8 h-8 border-4 border-purple-500 border-t-transparent rounded-full mx-auto mb-4\"></div>\n              <p className=\"text-gray-400\">ÿ¨ÿßÿ±Ÿä ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ...</p>\n            </div>\n          ) : users?.length ? (\n            <div className=\"grid gap-4\">\n              {users.map((user: any, index: number) => {\n                const RoleIcon = getRoleIcon(user.role);\n                return (\n                  <GlassCard \n                    key={user.id} \n                    className=\"p-6\"\n                    data-testid={`card-user-${index}`}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4 space-x-reverse\">\n                        <div className=\"w-12 h-12 gradient-blue rounded-full flex items-center justify-center overflow-hidden\">\n                          {user.profileImageUrl ? (\n                            <img \n                              src={user.profileImageUrl} \n                              alt={`${user.firstName} ${user.lastName}`}\n                              className=\"w-full h-full object-cover\"\n                            />\n                          ) : (\n                            <Users className=\"w-6 h-6\" />\n                          )}\n                        </div>\n                        <div>\n                          <h3 className=\"text-lg font-semibold\" data-testid={`text-user-name-${index}`}>\n                            {user.username || `${user.firstName || ''} ${user.lastName || ''}`.trim() || user.email || 'ŸÖÿ≥ÿ™ÿÆÿØŸÖ'}\n                          </h3>\n                          <p className=\"text-sm text-gray-400\" data-testid={`text-user-email-${index}`}>\n                            {user.email || (user.username ? `@${user.username}` : 'ÿ®ÿØŸàŸÜ ÿ®ÿ±ŸäÿØ ÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä')}\n                          </p>\n                          <p className=\"text-xs text-gray-500\" data-testid={`text-user-created-${index}`}>\n                            ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿ•ŸÜÿ¥ÿßÿ°: {new Date(user.createdAt).toLocaleDateString('ar-IQ')}\n                          </p>\n                          {user.isManualUser && (\n                            <p className=\"text-xs text-blue-400\">ÿ≠ÿ≥ÿßÿ® ŸÖÿ≠ŸÑŸä</p>\n                          )}\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-3 space-x-reverse\">\n                        <Badge className={`${getRoleBadgeColor(user.role)} border-0`} data-testid={`badge-user-role-${index}`}>\n                          <RoleIcon className=\"w-3 h-3 ml-1\" />\n                          {getRoleText(user.role)}\n                        </Badge>\n                        \n                        {currentUser?.id === user.id && (\n                          <Badge className=\"bg-yellow-500/20 text-yellow-400 border-0\" data-testid={`badge-current-user-${index}`}>\n                            ÿ£ŸÜÿ™\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                  </GlassCard>\n                );\n              })}\n            </div>\n          ) : (\n            <div className=\"text-center py-12 text-gray-400\">\n              <Users className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n              <p data-testid=\"text-no-users\">ŸÑÿß ŸäŸàÿ¨ÿØ ŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ÿ•ÿ∂ÿßŸÅŸäŸäŸÜ</p>\n              <p className=\"text-sm mt-2\">ÿßÿ®ÿØÿ£ ÿ®ÿ•ÿ∂ÿßŸÅÿ© ŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ÿ¨ÿØÿØ ŸÑŸÑŸÜÿ∏ÿßŸÖ</p>\n            </div>\n          )}\n        </GlassCard>\n      </main>\n    </div>\n  );\n}\n","size_bytes":14662},"client/src/components/layout/header.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Bell, User, LogOut, Settings, Edit } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function Header() {\n  const { user, logout } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [isProfileOpen, setIsProfileOpen] = useState(false);\n  const [isProfileEditOpen, setIsProfileEditOpen] = useState(false);\n  const [profileData, setProfileData] = useState({\n    name: \"ÿ£ŸäŸÖŸÜ ÿßŸÑŸÜÿ¨ÿßÿ±\",\n    email: user?.email || \"admin@iqrcontrol.com\",\n    username: \"admin\",\n    phone: \"+964 770 123 4567\",\n    password: \"\",\n    confirmPassword: \"\"\n  });\n\n  const handleSaveProfile = async () => {\n    try {\n      // Validate password confirmation\n      if (profileData.password && profileData.password !== profileData.confirmPassword) {\n        toast({\n          title: \"ÿÆÿ∑ÿ£\",\n          description: \"ŸÉŸÑŸÖÿßÿ™ ÿßŸÑŸÖÿ±Ÿàÿ± ÿ∫Ÿäÿ± ŸÖÿ™ÿ∑ÿßÿ®ŸÇÿ©\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n\n      const response = await fetch('/api/auth/user/profile', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: profileData.name,\n          email: profileData.email,\n          username: profileData.username,\n          phone: profileData.phone,\n          password: profileData.password || undefined\n        }),\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"ÿ™ŸÖ ÿßŸÑÿ≠ŸÅÿ∏\",\n          description: \"ÿ™ŸÖ ÿ≠ŸÅÿ∏ ÿ™ÿ∫ŸäŸäÿ±ÿßÿ™ ÿßŸÑÿ®ÿ±ŸàŸÅÿßŸäŸÑ ÿ®ŸÜÿ¨ÿßÿ≠\",\n          variant: \"default\"\n        });\n        setIsProfileEditOpen(false);\n        // Clear password fields\n        setProfileData(prev => ({ ...prev, password: \"\", confirmPassword: \"\" }));\n      } else {\n        throw new Error('Failed to update profile');\n      }\n    } catch (error) {\n      console.error(\"Error saving profile:\", error);\n      toast({\n        title: \"ÿÆÿ∑ÿ£\",\n        description: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ≠ŸÅÿ∏ ÿßŸÑÿ®ÿ±ŸàŸÅÿßŸäŸÑ\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  return (\n    <header className=\"glass-card border-b border-white/20 px-6 py-4 sticky top-0 z-50 mx-4 mt-4 rounded-2xl\">\n      <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4 space-x-reverse\">\n          <div className=\"w-12 h-12 gradient-purple rounded-full flex items-center justify-center\">\n            <i className=\"fas fa-chart-line text-xl text-white\"></i>\n          </div>\n          <div>\n            <h1 className=\"text-2xl font-bold\" data-testid=\"text-app-title\">IQR CONTROL</h1>\n            <p className=\"text-sm text-gray-300\" data-testid=\"text-app-subtitle\">ŸÜÿ∏ÿßŸÖ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ£ÿπŸÖÿßŸÑ ÿßŸÑŸÖÿ™ŸÉÿßŸÖŸÑ</p>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-4 space-x-reverse\">\n          <button \n            className=\"p-2 glass-card rounded-full hover:bg-white/20 transition-all duration-300\"\n            data-testid=\"button-notifications\"\n          >\n            <Bell className=\"w-5 h-5\" />\n          </button>\n          <Dialog open={isProfileOpen} onOpenChange={setIsProfileOpen}>\n            <DialogTrigger asChild>\n              <div className=\"flex items-center space-x-3 space-x-reverse cursor-pointer hover:bg-white/10 rounded-lg p-2 transition-all duration-300\" data-testid=\"button-profile\">\n                <div className=\"w-10 h-10 gradient-blue rounded-full flex items-center justify-center\">\n                  {user?.profileImageUrl ? (\n                    <img \n                      src={user.profileImageUrl} \n                      alt=\"Profile\" \n                      className=\"w-full h-full rounded-full object-cover\" \n                    />\n                  ) : (\n                    <User className=\"w-5 h-5\" />\n                  )}\n                </div>\n                <span className=\"text-sm font-medium\" data-testid=\"text-username\">\n                  ÿ£ŸäŸÖŸÜ ÿßŸÑŸÜÿ¨ÿßÿ±\n                </span>\n              </div>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-md glass-card border-white/20\">\n              <DialogHeader>\n                <DialogTitle data-testid=\"text-profile-title\">ÿßŸÑŸÖŸÑŸÅ ÿßŸÑÿ¥ÿÆÿµŸä</DialogTitle>\n              </DialogHeader>\n              \n              <div className=\"space-y-6\">\n                <div className=\"flex items-center space-x-4 space-x-reverse\">\n                  <div className=\"w-16 h-16 gradient-blue rounded-full flex items-center justify-center\">\n                    {user?.profileImageUrl ? (\n                      <img \n                        src={user.profileImageUrl} \n                        alt=\"Profile\" \n                        className=\"w-full h-full rounded-full object-cover\" \n                      />\n                    ) : (\n                      <User className=\"w-8 h-8\" />\n                    )}\n                  </div>\n                  <div>\n                    <h3 className=\"text-xl font-bold\" data-testid=\"text-profile-name\">ÿ£ŸäŸÖŸÜ ÿßŸÑŸÜÿ¨ÿßÿ±</h3>\n                    <p className=\"text-sm text-gray-400\" data-testid=\"text-profile-email\">{user?.email || \"admin@iqrcontrol.com\"}</p>\n                    <p className=\"text-xs text-gray-500\" data-testid=\"text-profile-role\">ŸÖÿØŸäÿ± ÿßŸÑŸÜÿ∏ÿßŸÖ</p>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  <h4 className=\"text-sm font-semibold text-gray-300\">ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ≠ÿ≥ÿßÿ®</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">ÿßÿ≥ŸÖ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ:</span>\n                      <span data-testid=\"text-profile-username\">ÿ£ŸäŸÖŸÜ ÿßŸÑŸÜÿ¨ÿßÿ±</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä:</span>\n                      <span data-testid=\"text-profile-user-email\">{user?.email || \"admin@iqrcontrol.com\"}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">ÿßŸÑÿØŸàÿ±:</span>\n                      <span className=\"text-green-400\" data-testid=\"text-profile-user-role\">ŸÖÿØŸäÿ± ÿßŸÑŸÜÿ∏ÿßŸÖ</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿßŸÜÿ∂ŸÖÿßŸÖ:</span>\n                      <span data-testid=\"text-profile-join-date\">{new Date().toLocaleDateString('ar-IQ')}</span>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex space-x-3 space-x-reverse\">\n                  <Button \n                    variant=\"outline\" \n                    className=\"flex-1 border-blue-400 text-blue-400 hover:bg-blue-400/10\"\n                    onClick={() => setIsProfileEditOpen(true)}\n                    data-testid=\"button-profile-edit\"\n                  >\n                    <Settings className=\"w-4 h-4 ml-2\" />\n                    ÿ™ÿπÿØŸäŸÑ ÿßŸÑÿ®ÿ±ŸàŸÅÿßŸäŸÑ\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    className=\"flex-1 border-red-400 text-red-400 hover:bg-red-400/10\"\n                    onClick={async () => {\n                      try {\n                        await logout();\n                        setLocation('/login');\n                        setIsProfileOpen(false);\n                        toast({\n                          title: \"ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿÆÿ±Ÿàÿ¨\",\n                          description: \"ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿÆÿ±Ÿàÿ¨ŸÉ ÿ®ŸÜÿ¨ÿßÿ≠\",\n                          variant: \"default\"\n                        });\n                      } catch (error) {\n                        toast({\n                          title: \"ÿÆÿ∑ÿ£\",\n                          description: \"ŸÅÿ¥ŸÑ ŸÅŸä ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿÆÿ±Ÿàÿ¨\",\n                          variant: \"destructive\"\n                        });\n                      }\n                    }}\n                    data-testid=\"button-profile-logout\"\n                  >\n                    <LogOut className=\"w-4 h-4 ml-2\" />\n                    ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿÆÿ±Ÿàÿ¨\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n\n          {/* Profile Edit Dialog */}\n          <Dialog open={isProfileEditOpen} onOpenChange={setIsProfileEditOpen}>\n            <DialogContent className=\"sm:max-w-md glass-card border-white/20\">\n              <DialogHeader>\n                <DialogTitle data-testid=\"text-profile-edit-title\">ÿ™ÿπÿØŸäŸÑ ÿßŸÑÿ®ÿ±ŸàŸÅÿßŸäŸÑ</DialogTitle>\n              </DialogHeader>\n              \n              <div className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"edit-name\">ÿßŸÑÿßÿ≥ŸÖ ÿßŸÑŸÉÿßŸÖŸÑ</Label>\n                    <Input \n                      id=\"edit-name\"\n                      value={profileData.name}\n                      onChange={(e) => setProfileData(prev => ({ ...prev, name: e.target.value }))}\n                      className=\"glass-card border-white/20 focus:border-blue-400\"\n                      data-testid=\"input-edit-name\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"edit-email\">ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä</Label>\n                    <Input \n                      id=\"edit-email\"\n                      type=\"email\"\n                      value={profileData.email}\n                      onChange={(e) => setProfileData(prev => ({ ...prev, email: e.target.value }))}\n                      className=\"glass-card border-white/20 focus:border-blue-400\"\n                      data-testid=\"input-edit-email\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"edit-username\">ÿßÿ≥ŸÖ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ</Label>\n                    <Input \n                      id=\"edit-username\"\n                      value={profileData.username}\n                      onChange={(e) => setProfileData(prev => ({ ...prev, username: e.target.value }))}\n                      className=\"glass-card border-white/20 focus:border-blue-400\"\n                      data-testid=\"input-edit-username\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"edit-phone\">ÿ±ŸÇŸÖ ÿßŸÑŸáÿßÿ™ŸÅ</Label>\n                    <Input \n                      id=\"edit-phone\"\n                      type=\"tel\"\n                      value={profileData.phone}\n                      onChange={(e) => setProfileData(prev => ({ ...prev, phone: e.target.value }))}\n                      className=\"glass-card border-white/20 focus:border-blue-400\"\n                      data-testid=\"input-edit-phone\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"edit-password\">ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ÿßŸÑÿ¨ÿØŸäÿØÿ© (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)</Label>\n                    <Input \n                      id=\"edit-password\"\n                      type=\"password\"\n                      value={profileData.password}\n                      onChange={(e) => setProfileData(prev => ({ ...prev, password: e.target.value }))}\n                      placeholder=\"ÿßÿ™ÿ±ŸÉŸáÿß ŸÅÿßÿ±ÿ∫ÿ© ÿ•ÿ∞ÿß ŸÑŸÖ ÿ™ÿ±ÿØ ÿßŸÑÿ™ÿ∫ŸäŸäÿ±\"\n                      className=\"glass-card border-white/20 focus:border-blue-400\"\n                      data-testid=\"input-edit-password\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"edit-confirm-password\">ÿ™ÿ£ŸÉŸäÿØ ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±</Label>\n                    <Input \n                      id=\"edit-confirm-password\"\n                      type=\"password\"\n                      value={profileData.confirmPassword}\n                      onChange={(e) => setProfileData(prev => ({ ...prev, confirmPassword: e.target.value }))}\n                      placeholder=\"ÿ™ÿ£ŸÉŸäÿØ ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ÿßŸÑÿ¨ÿØŸäÿØÿ©\"\n                      className=\"glass-card border-white/20 focus:border-blue-400\"\n                      data-testid=\"input-edit-confirm-password\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex space-x-3 space-x-reverse\">\n                  <Button \n                    className=\"flex-1 gradient-blue hover:scale-105 transition-transform\"\n                    onClick={handleSaveProfile}\n                    data-testid=\"button-save-profile\"\n                  >\n                    <Edit className=\"w-4 h-4 ml-2\" />\n                    ÿ≠ŸÅÿ∏ ÿßŸÑÿ™ÿ∫ŸäŸäÿ±ÿßÿ™\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    className=\"flex-1 border-gray-400 text-gray-400 hover:bg-gray-400/10\"\n                    onClick={() => setIsProfileEditOpen(false)}\n                    data-testid=\"button-cancel-profile-edit\"\n                  >\n                    ÿ•ŸÑÿ∫ÿßÿ°\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":13950},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/file-upload.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Upload, File, X } from \"lucide-react\";\n\ninterface FileUploadProps {\n  onFileSelect: (file: File) => void;\n  accept?: string;\n  maxSize?: number;\n  className?: string;\n}\n\nexport function FileUpload({ \n  onFileSelect, \n  accept = \"image/*,application/pdf\",\n  maxSize = 10 * 1024 * 1024, // 10MB\n  className \n}: FileUploadProps) {\n  const [dragOver, setDragOver] = useState(false);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setDragOver(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setDragOver(false);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setDragOver(false);\n    \n    const files = Array.from(e.dataTransfer.files);\n    if (files.length > 0) {\n      handleFileSelect(files[0]);\n    }\n  };\n\n  const handleFileSelect = (file: File) => {\n    if (file.size > maxSize) {\n      alert(`ÿ≠ÿ¨ŸÖ ÿßŸÑŸÖŸÑŸÅ ŸÉÿ®Ÿäÿ± ÿ¨ÿØÿßŸã. ÿßŸÑÿ≠ÿØ ÿßŸÑÿ£ŸÇÿµŸâ ${maxSize / (1024 * 1024)}MB`);\n      return;\n    }\n    \n    setSelectedFile(file);\n    onFileSelect(file);\n  };\n\n  const handleClick = () => {\n    fileInputRef.current?.click();\n  };\n\n  const handleRemove = () => {\n    setSelectedFile(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  return (\n    <div className={cn(\"w-full\", className)}>\n      <div\n        className={cn(\n          \"border-2 border-dashed rounded-xl p-6 text-center transition-colors\",\n          dragOver ? \"border-primary bg-primary/5\" : \"border-white/30\",\n          \"hover:border-white/50 cursor-pointer\"\n        )}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onDrop={handleDrop}\n        onClick={handleClick}\n        data-testid=\"file-upload-area\"\n      >\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          accept={accept}\n          onChange={(e) => e.target.files?.[0] && handleFileSelect(e.target.files[0])}\n          className=\"hidden\"\n          data-testid=\"file-input\"\n        />\n        \n        {selectedFile ? (\n          <div className=\"flex items-center justify-center space-x-3 space-x-reverse\">\n            <File className=\"w-8 h-8 text-green-400\" />\n            <div className=\"text-right\">\n              <p className=\"font-medium text-green-400\">{selectedFile.name}</p>\n              <p className=\"text-sm text-gray-400\">\n                {(selectedFile.size / (1024 * 1024)).toFixed(2)} MB\n              </p>\n            </div>\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                handleRemove();\n              }}\n              className=\"p-1 hover:bg-red-500/20 rounded-full transition-colors\"\n              data-testid=\"button-remove-file\"\n            >\n              <X className=\"w-4 h-4 text-red-400\" />\n            </button>\n          </div>\n        ) : (\n          <>\n            <Upload className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n            <p className=\"text-gray-400 mb-2\">ÿßÿ≥ÿ≠ÿ® ÿßŸÑŸÖŸÑŸÅ ŸáŸÜÿß ÿ£Ÿà ÿßŸÜŸÇÿ± ŸÑŸÑÿ™ÿ≠ÿØŸäÿØ</p>\n            <p className=\"text-sm text-gray-500\">\n              ŸäŸèÿ≥ŸÖÿ≠ ÿ®ŸÖŸÑŸÅÿßÿ™ ÿßŸÑÿµŸàÿ± Ÿà PDF ÿ≠ÿ™Ÿâ {maxSize / (1024 * 1024)}MB\n            </p>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3486},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/glass-card.tsx":{"content":"import { cn } from \"@/lib/utils\";\n\ninterface GlassCardProps extends React.HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode;\n  gradient?: 'purple' | 'green' | 'blue' | 'orange' | 'red' | 'cyan' | 'pink' | 'indigo';\n  hover?: boolean;\n  glow?: boolean;\n}\n\nexport function GlassCard({ \n  children, \n  className, \n  gradient,\n  hover = false,\n  glow = false,\n  ...props \n}: GlassCardProps) {\n  return (\n    <div\n      className={cn(\n        \"glass-card rounded-3xl shadow-xl\",\n        gradient && `gradient-${gradient}`,\n        hover && \"hover:scale-105 transition-all duration-500 cursor-pointer\",\n        glow && \"hover:animate-glow\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n","size_bytes":731},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}